{"version":3,"sources":["webpack:///./src/app/views/survey/answer-template-popup/answer-template-popup.component.html","webpack:///./src/app/views/survey/answer-template-popup/answer-template-popup.component.ts","webpack:///./src/app/views/survey/survey-builder/survey-builder.component.html","webpack:///./src/app/views/survey/survey-builder/survey-builder.component.ts","webpack:///./src/app/views/survey/survey-creation-popup/survey-creation-popup.component.html","webpack:///./src/app/views/survey/survey-creation-popup/survey-creation-popup.component.ts","webpack:///./src/app/views/survey/survey-setting/survey-setting.component.html","webpack:///./src/app/views/survey/survey-setting/survey-setting.component.ts","webpack:///./src/app/views/survey/survey-table/survey-table.component.html","webpack:///./src/app/views/survey/survey-table/survey-table.component.ts","webpack:///./src/app/views/survey/survey.component.html","webpack:///./src/app/views/survey/survey.component.ts","webpack:///./src/app/views/survey/survey.module.ts","webpack:///./src/app/views/survey/survey.routing.ts","webpack:///./src/app/views/survey/survey.service.ts"],"names":[],"mappings":"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","file":"views-survey-survey-module.js","sourcesContent":["module.exports = \"<h1 matDialogTitle>{{data.title}}</h1>\\r\\n<form [formGroup]=\\\"ansTemplateForm\\\" (ngSubmit)=\\\"submit()\\\">\\r\\n  <mat-dialog-content class=\\\"mat-typography\\\">\\r\\n\\r\\n    <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n\\r\\n      <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\">\\r\\n        <div class=\\\"text-muted\\\">\\r\\n          Create your answer template by adding template name,type and answers. answers need to have a lable,value and option value\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput [formControl]=\\\"ansTemplateForm.controls['name']\\\" required name=\\\"name\\\" placeholder=\\\"Answer template name\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput [formControl]=\\\"ansTemplateForm.controls['answerTemplateType']\\\" required name=\\\"answerTemplateType\\\" placeholder=\\\"Answer template type\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n\\r\\n\\r\\n\\r\\n      <div fxFlex=\\\"100\\\" [@animate]=\\\"{value:'*',params:{y:'50px',delay:'300ms'}}\\\" formArrayName='answers' *ngFor=\\\"let answer of ansTemplateForm.controls['answers'].controls; let i=index\\\">\\r\\n\\r\\n        <mat-card-title>\\r\\n          <small class=\\\"text-muted\\\"> Answer {{i + 1}}</small>\\r\\n        </mat-card-title>\\r\\n\\r\\n        <div [formGroupName]=\\\"i\\\">\\r\\n          <div fxFlex=\\\"25\\\" class=\\\"pr-1\\\">\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput formControlName='lable' required name=\\\"lable\\\" placeholder=\\\"Answer lable\\\">\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <div fxFlex=\\\"25\\\" class=\\\"pr-1\\\">\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput formControlName='value' required name=\\\"value\\\" placeholder=\\\"Answer value\\\">\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <div fxFlex=\\\"25\\\" class=\\\"pr-1\\\">\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput formControlName='optionNumber' required name=\\\"optionNumber\\\" placeholder=\\\"Answer option\\\">\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <div fxFlex=\\\"25\\\" class=\\\"pr-1\\\">\\r\\n            <mat-button-toggle  (click)='addAnsTemplate()' value=\\\"add\\\">\\r\\n              <mat-icon>add</mat-icon>\\r\\n            </mat-button-toggle>\\r\\n            <mat-button-toggle *ngIf=\\\"ansTemplateForm.controls['answers'].controls.length > 1\\\" (click)=removeAnsTemplate(i) value=\\\"remove\\\">\\r\\n              <mat-icon>remove</mat-icon>\\r\\n            </mat-button-toggle>\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n  </mat-dialog-content>\\r\\n\\r\\n\\r\\n  <mat-dialog-actions align=\\\"end\\\">\\r\\n    <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"ansTemplateForm.invalid\\\">Save</button>\\r\\n    <span fxFlex></span>\\r\\n    <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n  </mat-dialog-actions>\\r\\n\\r\\n\\r\\n</form>\\r\\n\"","import { Component, OnInit, Input, Inject } from \"@angular/core\";\r\nimport { egretAnimations } from \"../../../shared/animations/egret-animations\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material\";\r\nimport { FormGroup, FormBuilder, FormArray } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: \"app-answer-template-popup\",\r\n  templateUrl: \"./answer-template-popup.component.html\",\r\n  animations: egretAnimations\r\n})\r\nexport class AnswerTemplatePopupComponent implements OnInit {\r\n  public ansTemplateForm: FormGroup;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public dialogRef: MatDialogRef<AnswerTemplatePopupComponent>,\r\n    public fb: FormBuilder\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.buildAnsTemplateform(this.data.payload);\r\n    this.hideRemoveButton();\r\n  }\r\n\r\n  buildAnsTemplateform(fieldItem) {\r\n    this.ansTemplateForm = this.fb.group({\r\n      name: [fieldItem.name || \"\"],\r\n      answerTemplateType: [fieldItem.answerTemplateType || \"\"],\r\n      answers: this.fb.array([])\r\n    });\r\n    this.patch(fieldItem.answers);\r\n  }\r\n\r\n  patch(fields?) {\r\n    const control = <FormArray>this.ansTemplateForm.controls[\"answers\"];\r\n    if (!fields) {\r\n      control.push(this.initAnswerTemplate());\r\n      return;\r\n    }\r\n    fields.forEach(x => {\r\n      control.push(this.initAnswerTemplate(x.lable, x.value, x.optionNumber));\r\n    });\r\n  }\r\n\r\n  initAnswerTemplate(lable?, value?, optionNumber?) {\r\n    return this.fb.group({\r\n      lable: [lable || \"\"],\r\n      value: [value || \"\"],\r\n      optionNumber: [optionNumber || \"\"]\r\n    });\r\n  }\r\n\r\n  addAnsTemplate() {\r\n    const answer = <FormArray>this.ansTemplateForm.controls[\"answers\"];\r\n    answer.push(this.initAnswerTemplate());\r\n  }\r\n\r\n  removeAnsTemplate(index: number) {\r\n    const answer = <FormArray>this.ansTemplateForm.controls[\"answers\"];\r\n    answer.removeAt(index);\r\n  }\r\n\r\n  hideRemoveButton() {\r\n    return this.ansTemplateForm.controls[\"answers\"].value.length > 1;\r\n  }\r\n\r\n  submit() {\r\n    console.log(JSON.stringify(this.ansTemplateForm.value));\r\n    this.dialogRef.close(this.ansTemplateForm.value);\r\n  }\r\n}\r\n","module.exports = \"<mat-card class=\\\"p-0\\\" [@animate]=\\\"{value:'*',params:{y:'50px',delay:'300ms'}}\\\">\\r\\n  <mat-card-title>\\r\\n    <div class=\\\"card-title-text\\\">Survey Builder</div>\\r\\n    <mat-divider></mat-divider>\\r\\n  </mat-card-title>\\r\\n  <mat-card-content class=\\\"p-0\\\">\\r\\n\\r\\n    <form [formGroup]=\\\"questionForm\\\" (ngSubmit)=\\\"submit()\\\">\\r\\n      <mat-horizontal-stepper linear #stepper>\\r\\n        <mat-step [stepControl]=\\\"questionForm\\\">\\r\\n\\r\\n          <ng-template matStepLabel>Setup your questions</ng-template>\\r\\n\\r\\n          <div class=\\\"text-right mb-1\\\">\\r\\n            <div class=\\\"m-333 text-right\\\">\\r\\n              <button  type='button' mat-raised-button class=\\\"mb-05\\\" (click)=\\\"addQuestion()\\\" color=\\\"accent\\\">Add Question</button>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <mat-card formArrayName='questions' *ngFor=\\\"let answer of questionForm.controls['questions'].controls; let i=index\\\" class=\\\"p-1\\\"\\r\\n            [@animate]=\\\"{value:'*',params:{y:'50px',delay:'300ms'}}\\\">\\r\\n\\r\\n            <mat-card-title class=\\\"p-0\\\">\\r\\n              <small class=\\\"text-muted\\\"> Question {{i+1}} </small>\\r\\n            </mat-card-title>\\r\\n\\r\\n            <div [formGroupName]=\\\"i\\\">\\r\\n              <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                  <input matInput formControlName=\\\"name\\\" required name=\\\"lable\\\" placeholder=\\\"Type your Question\\\">\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n\\r\\n              <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                  <mat-select formControlName=\\\"answerTemplate\\\" required placeholder=\\\"Choose Answer Template\\\">\\r\\n                    <mat-option>None</mat-option>\\r\\n                    <mat-option value=\\\"product\\\">Product Survey</mat-option>\\r\\n                    <mat-option value=\\\"evote\\\">Evote Survey</mat-option>\\r\\n                  </mat-select>\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n\\r\\n              <div fxFlex=\\\"20\\\" class=\\\"pr-0\\\">\\r\\n                <button  type='button' mat-raised-button *ngIf=\\\"questionForm.controls['questions'].controls.length > 1\\\" (click)='removeQuestion(i)' color=\\\"warn\\\">Remove</button>\\r\\n              </div>\\r\\n\\r\\n            </div>\\r\\n          </mat-card>\\r\\n\\r\\n          <div>\\r\\n            <button type='button' color=\\\"primary\\\" [disabled]=\\\"questionForm.invalid\\\" mat-button matStepperNext>Next</button>\\r\\n          </div>\\r\\n\\r\\n\\r\\n        </mat-step>\\r\\n\\r\\n        <mat-step [optional]=\\\"isOptional\\\">\\r\\n\\r\\n          <ng-template matStepLabel>Review</ng-template>\\r\\n          <mat-form-field>\\r\\n            <input matInput placeholder=\\\"Address\\\" required>\\r\\n          </mat-form-field>\\r\\n          <div>\\r\\n            <button type='button' mat-button color=\\\"primary\\\" matStepperPrevious>Back</button>\\r\\n            <button type='button' mat-button color=\\\"primary\\\" matStepperNext>Next</button>\\r\\n          </div>\\r\\n\\r\\n        </mat-step>\\r\\n        <mat-step>\\r\\n          <ng-template matStepLabel>Done</ng-template>\\r\\n          You are now done.\\r\\n          <div>\\r\\n            <button type='button' mat-button color=\\\"primary\\\" matStepperPrevious>Back</button>\\r\\n            <button type='submit' mat-button color=\\\"primary\\\" (click)=\\\"stepper.reset()\\\">Submit</button>\\r\\n          </div>\\r\\n        </mat-step>\\r\\n      </mat-horizontal-stepper>\\r\\n    </form>\\r\\n\\r\\n\\r\\n  </mat-card-content>\\r\\n</mat-card>\\r\\n\"","import { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { egretAnimations } from \"../../../shared/animations/egret-animations\";\r\nimport { LayoutService } from \"../../../shared/services/layout.service\";\r\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n  selector: \"app-survey-builder\",\r\n  templateUrl: \"./survey-builder.component.html\",\r\n  animations: egretAnimations\r\n})\r\nexport class SurveyBuilderComponent implements OnInit {\r\n  questionForm: FormGroup;\r\n  private sub: any;\r\n\r\n  isOptional = false;\r\n\r\n  constructor(private fb: FormBuilder, private route : ActivatedRoute) {}\r\n\r\n  ngOnInit() {\r\n    this.sub = this.route.queryParams.subscribe(params => {\r\n      let name = params[\"name\"];\r\n      let type = params[\"surveyType\"]\r\n      console.log(\"name : \"+name)\r\n      console.log(\"type  : \"+type)\r\n  });\r\n\r\n\r\n    this.questionForm = this.fb.group({\r\n      questions:this.fb.array([this.initQuestionTemplate()])\r\n    });\r\n  }\r\n\r\n  initQuestionTemplate() {\r\n    return this.fb.group({\r\n      name: [],\r\n      answerTemplate: []\r\n    });\r\n  }\r\n\r\n\r\n\r\n  addQuestion() {\r\n    const question = <FormArray>this.questionForm.controls[\"questions\"];\r\n    question.push(this.initQuestionTemplate());\r\n  }\r\n\r\n\r\n  removeQuestion(index : number) {\r\n    const question = <FormArray>this.questionForm.controls[\"questions\"];\r\n    question.removeAt(index);\r\n  }\r\n\r\n  hideRemoveButton() {\r\n    return this.questionForm.controls[\"answers\"].value.length > 1;\r\n  }\r\n\r\n  submit() {\r\n\r\n    console.log( JSON.stringify(this.questionForm.value));\r\n  }\r\n}\r\n","module.exports = \"<h1 matDialogTitle>{{data.title}}</h1>\\r\\n\\r\\n<form [formGroup]=\\\"surveyForm\\\" (ngSubmit)=\\\"submit()\\\">\\r\\n  <mat-dialog-content class=\\\"mat-typography\\\">\\r\\n\\r\\n    <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n      <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput [formControl]=\\\"surveyForm.controls['name']\\\" required name=\\\"name\\\" placeholder=\\\"Survey name\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n\\r\\n      <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <mat-select [formControl]=\\\"surveyForm.controls['surveyType']\\\" [(ngModel)]=\\\"selectedType\\\" required placeholder=\\\"Survey Type\\\">\\r\\n            <mat-option  *ngFor=\\\"let type of surveyTypes\\\" [value]=\\\"type\\\">{{type.name}}</mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n  </mat-dialog-content>\\r\\n\\r\\n  <!-- routerLink=\\\"/surveys/builder_v1\\\" -->\\r\\n  <mat-dialog-actions align=\\\"end\\\">\\r\\n    <button mat-raised-button color=\\\"primary\\\"  [disabled]=\\\"surveyForm.invalid\\\">Save</button>\\r\\n    <span fxFlex></span>\\r\\n    <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n  </mat-dialog-actions>\\r\\n\\r\\n</form>\\r\\n\"","import { Component, OnInit, Inject } from \"@angular/core\";\r\nimport { egretAnimations } from \"../../../shared/animations/egret-animations\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material\";\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\";\r\nimport { LayoutService } from '../../../shared/services/layout.service';\r\n\r\n@Component({\r\n  selector: \"app-survey-creation-popup\",\r\n  templateUrl: \"./survey-creation-popup.component.html\",\r\n  animations: egretAnimations\r\n})\r\nexport class SurveyCreationPopupComponent implements OnInit {\r\n  public surveyForm: FormGroup;\r\n  selectedType : any;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private fb: FormBuilder,\r\n    public dialogRef: MatDialogRef<SurveyCreationPopupComponent>,\r\n    private layout: LayoutService\r\n  ) {}\r\n\r\n\r\n surveyTypes = [\r\n    {\r\n      name: 'Product Survey',\r\n      value: 'product'\r\n     },\r\n    {\r\n      name: 'Evote Survey',\r\n      value: 'evote'\r\n    }\r\n  ];\r\n\r\n\r\n\r\n  ngOnInit() {\r\n    this.buildSurveyForm(this.data.payload);\r\n    this.selectedType = this.data.payload.type;\r\n    if(this.data.payload.type === this.surveyTypes[0]){\r\n      console.log('equals')\r\n    }\r\n    console.log(this.surveyTypes[0])\r\n    console.log(this.data.payload.type);\r\n  }\r\n\r\n  buildSurveyForm(fieldItem) {\r\n    this.surveyForm = this.fb.group({\r\n      name: [fieldItem.topic || \"\"],\r\n      surveyType : [fieldItem.type || \"\"]\r\n    });\r\n  }\r\n\r\n  submit(){\r\n    this.dialogRef.close(this.surveyForm.value);\r\n  }\r\n\r\n}\r\n","module.exports = \"<mat-card class=\\\"p-0\\\" [@animate]=\\\"{value:'*',params:{y:'50px',delay:'300ms'}}\\\">\\r\\n  <mat-card-title>\\r\\n    <div class=\\\"card-title-text\\\">Survey Settings</div>\\r\\n    <mat-divider></mat-divider>\\r\\n  </mat-card-title>\\r\\n  <mat-card-content class=\\\"p-0\\\">\\r\\n    <div class=\\\"text-muted mb-1 m-1 text-left\\\">\\r\\n      you can configure your survey question answer with adding different options per answer. To setup your predefined answer template,\\r\\n      navigate to \\\"Answser template section \\\" by clicking \\\"Create Answer template\\\" button.\\r\\n    </div>\\r\\n    <div class=\\\"profile-actions text-right mb-1\\\">\\r\\n      <div class=\\\"m-333 text-right\\\">\\r\\n        <button mat-raised-button (click)=\\\"openAnswerTemplatePopup({},true)\\\" class=\\\"mb-05\\\" color=\\\"accent\\\">Create Answer template</button>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <mat-divider></mat-divider>\\r\\n\\r\\n    <mat-accordion>\\r\\n      <mat-expansion-panel>\\r\\n        <mat-expansion-panel-header>\\r\\n          <mat-panel-title>\\r\\n            Answer templates\\r\\n          </mat-panel-title>\\r\\n          <mat-panel-description>\\r\\n            View or Edit Predefined Answer template\\r\\n          </mat-panel-description>\\r\\n        </mat-expansion-panel-header>\\r\\n\\r\\n        <ngx-datatable class=\\\"material bg-white\\\" [columnMode]=\\\"'force'\\\" [headerHeight]=\\\"50\\\" [footerHeight]=\\\"50\\\" [rowHeight]=\\\"'auto'\\\"\\r\\n          [limit]=\\\"5\\\" [rows]=\\\"rows\\\">\\r\\n\\r\\n          <ngx-datatable-column name=\\\"Template Name\\\" [flexGrow]=\\\"1\\\">\\r\\n            <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n              {{row?.name}}\\r\\n            </ng-template>\\r\\n          </ngx-datatable-column>\\r\\n          <ngx-datatable-column name=\\\"Answer type\\\" [flexGrow]=\\\"1\\\">\\r\\n            <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n              {{row?.answerTemplateType}}\\r\\n            </ng-template>\\r\\n          </ngx-datatable-column>\\r\\n          <ngx-datatable-column name=\\\"Action\\\" [flexGrow]=\\\"1\\\">\\r\\n            <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n              <button mat-icon-button mat-sm-button (click)=\\\"getAnsTemplateById(row.id)\\\" color=\\\"primary\\\" class=\\\"mr-1\\\"><mat-icon>edit</mat-icon></button>\\r\\n              <button mat-icon-button mat-sm-button (click)=\\\"deleteAnsTemplate(row)\\\" color=\\\"warn\\\"  class=\\\"mr-1\\\" ><mat-icon>delete</mat-icon></button>\\r\\n            </ng-template>\\r\\n          </ngx-datatable-column>\\r\\n        </ngx-datatable>\\r\\n\\r\\n\\r\\n      </mat-expansion-panel>\\r\\n    </mat-accordion>\\r\\n\\r\\n  </mat-card-content>\\r\\n</mat-card>\\r\\n\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { egretAnimations } from \"../../../shared/animations/egret-animations\";\r\nimport { MatDialog, MatDialogRef } from \"@angular/material\";\r\nimport { AnswerTemplatePopupComponent } from \"../answer-template-popup/answer-template-popup.component\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { SurveyService } from \"../survey.service\";\r\nimport { AppErrorService } from \"../../../shared/services/app-error/app-error.service\";\r\nimport { AppLoaderService } from '../../../shared/services/app-loader/app-loader.service';\r\nimport { AppConfirmService } from '../../../shared/services/app-confirm/app-confirm.service';\r\n\r\n@Component({\r\n  selector: \"app-survey-setting\",\r\n  templateUrl: \"./survey-setting.component.html\",\r\n  animations: egretAnimations\r\n})\r\nexport class SurveySettingComponent implements OnInit {\r\n  rows: any[];\r\n  public getAnswersTemplatesSub: Subscription;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private surveyService: SurveyService,\r\n    private errDialog: AppErrorService,\r\n    private loader : AppLoaderService,\r\n    private confirmService : AppConfirmService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.getAllAnsTemplates();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.getAnswersTemplatesSub) {\r\n      this.getAnswersTemplatesSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  getAllAnsTemplates() {\r\n    this.getAnswersTemplatesSub = this.surveyService\r\n      .getAnswerTemplates()\r\n      .subscribe(\r\n        successResp => {\r\n          this.rows = successResp.content;\r\n          console.log(this.rows);\r\n        },\r\n        error => {\r\n          console.log(error);\r\n          console.log(error.status);\r\n          this.errDialog.showError({\r\n            title: \"Error\",\r\n            status: error.status,\r\n            type: \"http_error\"\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  openAnswerTemplatePopup(data: any = {}, isNew?) {\r\n    let title = isNew ? \"Add New Answer Template \" : \"Update Answer Template \";\r\n    let dialogRef: MatDialogRef<any> = this.dialog.open(\r\n      AnswerTemplatePopupComponent,\r\n      {\r\n        width: \"720px\",\r\n        disableClose: true,\r\n        data: { title: title, payload: data }\r\n      }\r\n    );\r\n\r\n    dialogRef.afterClosed().subscribe(res => {\r\n      if (!res) {\r\n        return;\r\n      }\r\n      this.loader.open();\r\n      if(isNew){\r\n        this.surveyService.addNewAnsTemplate(res,this.rows).subscribe(\r\n          data => {\r\n            console.log(\"response of creation \")\r\n            console.log(data)\r\n           this.rows =  data;\r\n            this.loader.close();\r\n          },\r\n          error => {\r\n            this.loader.close();\r\n            this.errDialog.showError({\r\n              title: \"Error\",\r\n              status: error.status,\r\n              type: \"http_error\"\r\n            });\r\n          }\r\n        );\r\n\r\n\r\n      }else{\r\n\r\n      }\r\n\r\n      console.log(\"input : \");\r\n      console.log(JSON.stringify(res));\r\n    });\r\n  }\r\n\r\n\r\n  deleteAnsTemplate(row){\r\n    this.confirmService\r\n    .confirm({ message: `Delete ${row.name}?` })\r\n    .subscribe(res => {\r\n      if (res) {\r\n        this.loader.open();\r\n        this.surveyService.removeAnsTemplate(row, this.rows).subscribe(\r\n          data => {\r\n            console.log(data)\r\n            this.rows = data;\r\n            this.loader.close();\r\n          },\r\n          error => {\r\n            this.loader.close();\r\n            this.errDialog.showError({\r\n              title: \"Error\",\r\n              status: error.status,\r\n              type: \"http_error\"\r\n            });\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  //for the movement unused\r\n  getAnsTemplateById(id){\r\n    this.surveyService.getAnsTemplateById(id,this.rows).subscribe(\r\n      successResp => {\r\n        console.log('by id response')\r\n        console.log(successResp)\r\n        this.openAnswerTemplatePopup(successResp);\r\n      },\r\n      error => {\r\n        this.errDialog.showError({\r\n          title: \"Error\",\r\n          status: error.status,\r\n          type: \"http_error\"\r\n        });\r\n      }\r\n    );\r\n  }\r\n}\r\n","module.exports = \"<mat-card class=\\\"p-0\\\" [@animate]=\\\"{value:'*',params:{y:'50px',delay:'300ms'}}\\\" >\\r\\n  <mat-card-title>\\r\\n    <div class=\\\"card-title-text\\\">Survey Summary</div>\\r\\n    <mat-divider></mat-divider>\\r\\n\\r\\n    <div class=\\\"profile-actions text-right mb-1\\\">\\r\\n        <div class=\\\"m-333\\\">\\r\\n          <button mat-raised-button class=\\\"mb-05\\\" (click)='openSurveyPopup({},true)' color=\\\"primary\\\">Add Survey</button>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n\\r\\n  </mat-card-title>\\r\\n  <mat-card-content class=\\\"p-0\\\">\\r\\n    <ngx-datatable class=\\\"material bg-white\\\" [columnMode]=\\\"'force'\\\" [headerHeight]=\\\"50\\\" [footerHeight]=\\\"50\\\" [rowHeight]=\\\"'auto'\\\"\\r\\n      [limit]=\\\"5\\\" [rows]=\\\"surveyData\\\">\\r\\n      <ngx-datatable-column name=\\\"Survey Topic\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          {{row?.topic}}\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n      <ngx-datatable-column name=\\\"Survey Type\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          {{row?.type.name}}\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n      <ngx-datatable-column name=\\\"Survey Source\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          {{row?.source}}\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n      <ngx-datatable-column name=\\\"Start Date\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          {{row?.start}}\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n      <ngx-datatable-column name=\\\"End Date\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          {{row?.end}}\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n      <ngx-datatable-column name=\\\"Action\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          <button mat-icon-button mat-sm-button (click)='openSurveyPopup(row,false)' color=\\\"primary\\\" class=\\\"mr-1\\\"><mat-icon>edit</mat-icon></button>\\r\\n          <button mat-icon-button mat-sm-button  color=\\\"warn\\\" class=\\\"mr-1\\\" ><mat-icon>delete</mat-icon></button>\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n    </ngx-datatable>\\r\\n\\r\\n\\r\\n  </mat-card-content>\\r\\n</mat-card>\\r\\n\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { egretAnimations } from \"../../../shared/animations/egret-animations\";\r\nimport { SurveyCreationPopupComponent } from \"../survey-creation-popup/survey-creation-popup.component\";\r\nimport { MatDialogRef, MatDialog } from \"@angular/material\";\r\nimport { LayoutService } from \"../../../shared/services/layout.service\";\r\nimport { NavigationExtras, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: \"app-survey-table\",\r\n  templateUrl: \"./survey-table.component.html\",\r\n  animations: egretAnimations\r\n})\r\nexport class SurveyTableComponent implements OnInit {\r\n  constructor(private dialog: MatDialog , private router: Router) {}\r\n\r\n\r\n  ngOnInit() {}\r\n\r\n  openSurveyPopup(data: any = {}, isNew?) {\r\n    let title = isNew ? \"Add New Survey \" : \"Update Survey \";\r\n    let dialogRef: MatDialogRef<any> = this.dialog.open(\r\n      SurveyCreationPopupComponent,\r\n      {\r\n        width: \"720px\",\r\n        disableClose: true,\r\n        data: { title: title, payload: data }\r\n      }\r\n    );\r\n\r\n    dialogRef.afterClosed().subscribe(res => {\r\n      if (!res) {\r\n        return;\r\n      }\r\n\r\n      console.log(\"input : \");\r\n      console.log(JSON.stringify(res));\r\n\r\n      let extraParam  : NavigationExtras = {\r\n          queryParams : {\r\n            \"name\" : res.name,\r\n            \"surveyType\" :res.surveyType\r\n          }\r\n      };\r\n\r\n      this.router.navigate(['surveys/builder_v1'],extraParam);\r\n\r\n\r\n    });\r\n  }\r\n\r\n\r\n  surveyData = [\r\n    {\r\n      topic: \"Addidas Air Survey\",\r\n      type: { name: \"Product Survey\", value: \"product\" },\r\n      source: \"Addidas Air XD1\",\r\n      start: \"2018/04/10\",\r\n      end: \"2018/05/10\"\r\n    },\r\n    {\r\n      topic: \"Addidas Air Survey\",\r\n      type: { name: \"Evote Survey\", value: \"evote\" },\r\n      source: \"Addidas Air XD1\",\r\n      start: \"2018/04/10\",\r\n      end: \"2018/05/10\"\r\n    },\r\n    {\r\n      topic: \"Addidas Air Survey\",\r\n      type: { name: \"Evote Survey\", value: \"evote\" },\r\n      source: \"Addidas Air XD1\",\r\n      start: \"2018/04/10\",\r\n      end: \"2018/05/10\"\r\n    },\r\n    {\r\n      topic: \"Addidas Air Survey\",\r\n      type: { name: \"Product Survey\", value: \"product\" },\r\n      source: \"Addidas Air XD1\",\r\n      start: \"2018/04/10\",\r\n      end: \"2018/05/10\"\r\n    },\r\n    {\r\n      topic: \"Addidas Air Survey\",\r\n      type: { name: \"Product Survey\", value: \"product\" },\r\n      source: \"Addidas Air XD1\",\r\n      start: \"2018/04/10\",\r\n      end: \"2018/05/10\"\r\n    }\r\n  ];\r\n}\r\n","module.exports = \"\\r\\n<div fxLayout=\\\"row\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n  <div fxFlex=\\\"100\\\" fxFlex.gt-md=\\\"300px\\\" fxFlex.gt-sm=\\\"50\\\">\\r\\n    <mat-card class=\\\"profile-sidebar mb-1 pb-0\\\">\\r\\n      <div class=\\\"propic text-center\\\">\\r\\n        <img src=\\\"assets/images/survey-icon.jpg\\\" alt=\\\"\\\">\\r\\n      </div>\\r\\n      <div class=\\\"profile-title text-center mb-1\\\">\\r\\n        <div class=\\\"main-title\\\">Survey Service</div>\\r\\n        <div class=\\\"subtitle mb-05\\\">Clear Picture Authentica</div>\\r\\n        <div class=\\\"text-muted\\\"> Provides the tools you need to easily create questionnaires.</div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"profile-nav\\\">\\r\\n        <mat-nav-list>\\r\\n          <mat-list-item routerLink=\\\"/surveys/summery\\\" routerLinkActive=\\\"list-item-active\\\">\\r\\n            <mat-icon>home</mat-icon>\\r\\n            Survey Summary\\r\\n          </mat-list-item>\\r\\n          <mat-divider></mat-divider>\\r\\n          <mat-list-item routerLink=\\\"/surveys/setting\\\" routerLinkActive=\\\"list-item-active\\\">\\r\\n            <mat-icon>settings</mat-icon>\\r\\n            Survey Settings\\r\\n          </mat-list-item>\\r\\n          <mat-divider></mat-divider>\\r\\n          <mat-list-item routerLink=\\\"/surveys/builder_v1\\\" routerLinkActive=\\\"list-item-active\\\">\\r\\n            <mat-icon>settings</mat-icon>\\r\\n            Survey Builder\\r\\n          </mat-list-item>\\r\\n          <mat-divider></mat-divider>\\r\\n        </mat-nav-list>\\r\\n      </div>\\r\\n    </mat-card>\\r\\n\\r\\n\\r\\n\\r\\n  </div>\\r\\n\\r\\n<!-- Profile Views -->\\r\\n  <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-md=\\\"calc(100% - 300px)\\\">\\r\\n    <router-outlet></router-outlet>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { egretAnimations } from '../../shared/animations/egret-animations';\r\n\r\n\r\n@Component({\r\n  selector: 'app-survey',\r\n  templateUrl: './survey.component.html',\r\n  animations: egretAnimations\r\n})\r\nexport class SurveyComponent implements OnInit {\r\n\r\n constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { SurveyComponent } from \"./survey.component\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { SurveyRoute } from \"./survey.routing\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport {\r\n  MatInputModule,\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatDialogModule,\r\n  MatSelectModule,\r\n  MatDatepickerModule,\r\n  MatNativeDateModule,\r\n  MatIconModule,\r\n  MatChipsModule,\r\n  MatDividerModule,\r\n  MatListModule,\r\n  MatExpansionModule,\r\n  MatButtonToggleModule,\r\n  MatSidenavModule,\r\n  MatHorizontalStepper,\r\n  MatStepperModule,\r\n  MatStepper\r\n\r\n} from \"@angular/material\";\r\nimport { NgxDatatableModule } from \"@swimlane/ngx-datatable\";\r\nimport { SurveyTableComponent } from \"./survey-table/survey-table.component\";\r\nimport { SurveySettingComponent } from \"./survey-setting/survey-setting.component\";\r\nimport { AnswerTemplatePopupComponent } from \"./answer-template-popup/answer-template-popup.component\";\r\nimport { SurveyCreationPopupComponent } from \"./survey-creation-popup/survey-creation-popup.component\";\r\nimport { SurveyBuilderComponent } from \"./survey-builder/survey-builder.component\";\r\nimport { LayoutService } from \"../../shared/services/layout.service\";\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { SurveyService } from './survey.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FlexLayoutModule,\r\n    ReactiveFormsModule,\r\n    MatInputModule,\r\n    NgxDatatableModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatDialogModule,\r\n    MatSelectModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatIconModule,\r\n    MatChipsModule,\r\n    MatDividerModule,\r\n    MatListModule,\r\n    MatExpansionModule,\r\n    MatButtonToggleModule,\r\n    MatSidenavModule,\r\n    RouterModule.forChild(SurveyRoute),\r\n    SharedModule,\r\n    MatStepperModule\r\n\r\n  ],\r\n  declarations: [\r\n    SurveyComponent,\r\n    SurveyTableComponent,\r\n    SurveySettingComponent,\r\n    AnswerTemplatePopupComponent,\r\n    SurveyCreationPopupComponent,\r\n    SurveyBuilderComponent\r\n  ],\r\n  entryComponents: [AnswerTemplatePopupComponent, SurveyCreationPopupComponent],\r\n  providers: [SurveyService]\r\n})\r\nexport class SurveyModule {}\r\n","import { Routes } from \"@angular/router\";\r\nimport { SurveyComponent } from \"./survey.component\";\r\nimport { SurveyTableComponent } from \"./survey-table/survey-table.component\";\r\nimport { SurveySettingComponent } from \"./survey-setting/survey-setting.component\";\r\nimport { SurveyBuilderComponent } from \"./survey-builder/survey-builder.component\";\r\n\r\nexport const SurveyRoute: Routes = [\r\n  {\r\n    path: \"\",\r\n    component: SurveyComponent,\r\n    children: [\r\n      {\r\n        path: \"summery\",\r\n        component: SurveyTableComponent,\r\n        data: { title: \"Survey Summary\", breadcrumb: \"Summary\" }\r\n      },\r\n      {\r\n        path: \"setting\",\r\n        component: SurveySettingComponent,\r\n        data: { title: \"Survey Setting\", breadcrumb: \"Setting\" }\r\n      },\r\n      {\r\n        path: \"builder_v1\",\r\n        component: SurveyBuilderComponent,\r\n        data: { title: \"Survey Builder\", breadcrumb: \"Builder\" }\r\n      }\r\n    ]\r\n  }\r\n];\r\n","import { Injectable } from \"@angular/core\";\r\nimport {\r\n  HttpClient,\r\n  HttpHeaders,\r\n  HttpErrorResponse\r\n} from \"@angular/common/http\";\r\nimport { environment } from \"../../../environments/environment.prod\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { catchError } from \"../../../../node_modules/rxjs/operators\";\r\nimport { _throw } from \"rxjs/Observable/throw\";\r\nimport { map } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class SurveyService {\r\n  surveyApiUrl: string = environment.surveyApiURL + \"answer-templates/\";\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      \"Content-Type\": \"application/json\",\r\n      \"Access-Control-Allow-Headers\":\r\n        \"Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With\"\r\n    })\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAnswerTemplates(): Observable<any> {\r\n    return this.http.get(this.surveyApiUrl).pipe(catchError(this.handleError));\r\n  }\r\n\r\n  addNewAnsTemplate(templateObj, items): Observable<any> {\r\n    return this.http\r\n      .post<any>(this.surveyApiUrl, templateObj, this.httpOptions)\r\n      .pipe(\r\n        map(data => {\r\n          items.unshift(data.content);\r\n          return items.slice();\r\n        }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getAnsTemplateById(id, items): Observable<any> {\r\n    console.log(\"by id url : \" + this.surveyApiUrl + id);\r\n    return this.http.get<any>(this.surveyApiUrl + id).pipe(\r\n      map(data => {\r\n        console.log(data.content);\r\n        return data.content;\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  removeAnsTemplate(row, items): Observable<any> {\r\n    return this.http.delete(this.surveyApiUrl + row.id, this.httpOptions).pipe(\r\n      map(data => {\r\n        let i = items.indexOf(row);\r\n        items.splice(i, 1);\r\n        return items;\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse | any) {\r\n    //console.log(error)\r\n    return _throw(error);\r\n  }\r\n}\r\n"],"sourceRoot":""}