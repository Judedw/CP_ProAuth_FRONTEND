{"version":3,"sources":["webpack:///./src/app/model/SurveyRequest.model.ts","webpack:///./src/app/shared/pipes/array-filter.pipe.ts","webpack:///./src/app/views/survey/answer-template-popup/answer-template-popup.component.html","webpack:///./src/app/views/survey/answer-template-popup/answer-template-popup.component.ts","webpack:///./src/app/views/survey/survey-builder/survey-builder.component.html","webpack:///./src/app/views/survey/survey-builder/survey-builder.component.ts","webpack:///./src/app/views/survey/survey-common.component.ts","webpack:///./src/app/views/survey/survey-creation-popup/survey-creation-popup.component.html","webpack:///./src/app/views/survey/survey-creation-popup/survey-creation-popup.component.ts","webpack:///./src/app/views/survey/survey-setting/survey-setting.component.html","webpack:///./src/app/views/survey/survey-setting/survey-setting.component.ts","webpack:///./src/app/views/survey/survey-table/survey-table.component.html","webpack:///./src/app/views/survey/survey-table/survey-table.component.ts","webpack:///./src/app/views/survey/survey.component.html","webpack:///./src/app/views/survey/survey.component.ts","webpack:///./src/app/views/survey/survey.module.ts","webpack:///./src/app/views/survey/survey.routing.ts","webpack:///./src/app/views/survey/survey.service.ts"],"names":[],"mappings":"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","file":"views-survey-survey-module.js","sourcesContent":["export class SurveyModel {\r\n  public topic: string;\r\n  public type: string;\r\n  public startDate: string;\r\n  public endDate: string;\r\n  public productId: string;\r\n  public voteId: string;\r\n  public questions?: any[] = [];\r\n\r\n  constructor(obj: ISurveyView) {\r\n    this.topic = obj.topic;\r\n    this.type = obj.type;\r\n    this.startDate = obj.startDate;\r\n    this.endDate = obj.endDate;\r\n    this.productId = obj.productId;\r\n    this.voteId = obj.voteId;\r\n    console.log(\" obj.questions \");\r\n    console.log(obj.questions);\r\n\r\n    obj.questions.forEach(question => {\r\n      const answerTemplate = new AnswerTemplate(\r\n        \"name\",\r\n        question.answerTemplate\r\n      );\r\n\r\n      let qOBj = new Question(question.name, answerTemplate);\r\n      console.log(\"question object\");\r\n      console.log(qOBj);\r\n      this.questions.unshift(qOBj);\r\n    });\r\n  }\r\n}\r\n\r\nexport class Question {\r\n  //answerTemplate\r\n  constructor(public name: string, public answerTemplate: AnswerTemplate) {}\r\n}\r\n\r\nexport class AnswerTemplate {\r\n  constructor(public name: string, public id: string) {}\r\n}\r\n\r\ninterface ISurveyView {\r\n  topic: string;\r\n  type: string;\r\n  startDate: string;\r\n  endDate: string;\r\n  productId: string;\r\n  voteId: string;\r\n  questions?: any[];\r\n}\r\n","import { PipeTransform, Pipe } from \"@angular/core\";\r\n\r\n@Pipe({\r\n  name: \"arrayFilter\",\r\n  pure: false\r\n})\r\nexport class ArrayFilter implements PipeTransform {\r\n  transform(items: any[], filterVal: any, arrType: string): any {\r\n    // console.log(\"array type : \" + arrType);\r\n    if (!items || !filterVal) {\r\n      console.log(\"no items\");\r\n      return items;\r\n    }\r\n    // console.log(' here items : ');\r\n    // console.log('filterVal : '+filterVal);\r\n    // console.log(items);\r\n    return items.filter(item => this.applyFilter(item, filterVal, arrType));\r\n  }\r\n\r\n  applyFilter(item, filterVal, arrType: string): any {\r\n    switch (arrType) {\r\n      case \"answer_types\":\r\n        return item.id.indexOf(filterVal) !== -1;\r\n      case \"products\":\r\n        return item.id.indexOf(filterVal) !== -1;\r\n      case \"evotes\":\r\n        return item.id.indexOf(filterVal) !== -1;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n}\r\n","module.exports = \"<h1 matDialogTitle>{{data.title}}</h1>\\r\\n<form [formGroup]=\\\"ansTemplateForm\\\" (ngSubmit)=\\\"submit()\\\">\\r\\n  <mat-dialog-content class=\\\"mat-typography\\\">\\r\\n\\r\\n    <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n\\r\\n      <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\">\\r\\n        <div class=\\\"text-muted\\\">\\r\\n          Create your answer template by adding template name,type and answers. answers need to have a lable,value and option value\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput [formControl]=\\\"ansTemplateForm.controls['name']\\\" required name=\\\"name\\\" placeholder=\\\"Answer template name\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <mat-select [(ngModel)]=\\\"selectedAnsType\\\" [formControl]=\\\"ansTemplateForm.controls['answerTemplateType']\\\" required placeholder=\\\"Answer template type\\\">\\r\\n            <mat-option>none</mat-option>\\r\\n            <mat-option *ngFor=\\\"let type of answerTypes\\\" [value]=\\\"type.value\\\">{{type.name}}</mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n\\r\\n\\r\\n      <div fxFlex=\\\"100\\\" [@animate]=\\\"{value:'*',params:{y:'50px',delay:'300ms'}}\\\" formArrayName='answers' *ngFor=\\\"let answer of ansTemplateForm.controls['answers'].controls; let i=index\\\">\\r\\n\\r\\n        <mat-card-title>\\r\\n          <small class=\\\"text-muted\\\"> Answer {{i + 1}}</small>\\r\\n        </mat-card-title>\\r\\n\\r\\n        <div [formGroupName]=\\\"i\\\">\\r\\n          <div fxFlex=\\\"25\\\" class=\\\"pr-1\\\">\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput formControlName='lable' required name=\\\"lable\\\" placeholder=\\\"Answer lable\\\">\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <div fxFlex=\\\"25\\\" class=\\\"pr-1\\\">\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput type=\\\"number\\\" formControlName='value' required name=\\\"value\\\" placeholder=\\\"Answer value\\\">\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <div fxFlex=\\\"25\\\" class=\\\"pr-1\\\">\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput type=\\\"number\\\" formControlName='optionNumber' required name=\\\"optionNumber\\\" placeholder=\\\"Answer option\\\">\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <div fxFlex=\\\"25\\\" class=\\\"pr-1\\\">\\r\\n            <mat-button-toggle (click)='addAnsTemplate()' value=\\\"add\\\">\\r\\n              <mat-icon>add</mat-icon>\\r\\n            </mat-button-toggle>\\r\\n            <mat-button-toggle *ngIf=\\\"ansTemplateForm.controls['answers'].controls.length > 1\\\" (click)=removeAnsTemplate(i) value=\\\"remove\\\">\\r\\n              <mat-icon>remove</mat-icon>\\r\\n            </mat-button-toggle>\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n  </mat-dialog-content>\\r\\n\\r\\n\\r\\n  <mat-dialog-actions align=\\\"end\\\">\\r\\n    <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"ansTemplateForm.invalid\\\">Save</button>\\r\\n    <span fxFlex></span>\\r\\n    <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n  </mat-dialog-actions>\\r\\n\\r\\n\\r\\n</form>\\r\\n\"","import { Component, OnInit, Input, Inject } from \"@angular/core\";\r\nimport { egretAnimations } from \"../../../shared/animations/egret-animations\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material\";\r\nimport { FormGroup, FormBuilder, FormArray } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: \"app-answer-template-popup\",\r\n  templateUrl: \"./answer-template-popup.component.html\",\r\n  animations: egretAnimations\r\n})\r\nexport class AnswerTemplatePopupComponent implements OnInit {\r\n  public ansTemplateForm: FormGroup;\r\n  selectedAnsType : string;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public dialogRef: MatDialogRef<AnswerTemplatePopupComponent>,\r\n    public fb: FormBuilder\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.buildAnsTemplateform(this.data.payload);\r\n    this.selectedAnsType = this.data.payload.answerTemplateType;\r\n    this.hideRemoveButton();\r\n  }\r\n\r\n  buildAnsTemplateform(fieldItem) {\r\n    this.ansTemplateForm = this.fb.group({\r\n      name: [fieldItem.name || \"\"],\r\n      answerTemplateType: [fieldItem.answerTemplateType || \"\"],\r\n      answers: this.fb.array([])\r\n    });\r\n    this.patch(fieldItem.answers);\r\n  }\r\n\r\n  patch(fields?) {\r\n    const control = <FormArray>this.ansTemplateForm.controls[\"answers\"];\r\n    if (!fields) {\r\n      control.push(this.initAnswerTemplate());\r\n      return;\r\n    }\r\n    fields.forEach(x => {\r\n      control.push(this.initAnswerTemplate(x.lable, x.value, x.optionNumber));\r\n    });\r\n  }\r\n\r\n  initAnswerTemplate(lable?, value?, optionNumber?) {\r\n    console.log(\" SET \" + lable + \" : \" + value + \" : \" + optionNumber);\r\n    return this.fb.group({\r\n      lable: [lable || \"\"],\r\n      value: [value + \"\" || \"\"],\r\n      optionNumber: [optionNumber + \"\" || \"\"]\r\n    });\r\n  }\r\n\r\n  addAnsTemplate() {\r\n    const answer = <FormArray>this.ansTemplateForm.controls[\"answers\"];\r\n    answer.push(this.initAnswerTemplate());\r\n  }\r\n\r\n  removeAnsTemplate(index: number) {\r\n    const answer = <FormArray>this.ansTemplateForm.controls[\"answers\"];\r\n    answer.removeAt(index);\r\n  }\r\n\r\n  hideRemoveButton() {\r\n    return this.ansTemplateForm.controls[\"answers\"].value.length > 1;\r\n  }\r\n\r\n  submit() {\r\n    console.log(JSON.stringify(this.ansTemplateForm.value));\r\n    return;\r\n    //this.dialogRef.close(this.ansTemplateForm.value);\r\n  }\r\n\r\n   answerTypes = [\r\n    // {\r\n    //   name: \"Free Text\",\r\n    //   value: \"F\"\r\n    // },\r\n    {\r\n      name: \"Multiple Options\",\r\n      value: \"M\"\r\n    },\r\n    {\r\n      name: \"Single Option\",\r\n      value: \"S\"\r\n    }\r\n  ];\r\n}\r\n","module.exports = \"<mat-card class=\\\"p-0\\\" [@animate]=\\\"{value:'*',params:{y:'50px',delay:'300ms'}}\\\">\\r\\n  <mat-card-title>\\r\\n    <div class=\\\"card-title-text\\\">Survey Builder - {{surveyName}}</div>\\r\\n    <mat-divider></mat-divider>\\r\\n  </mat-card-title>\\r\\n  <mat-card-content class=\\\"p-0\\\">\\r\\n\\r\\n\\r\\n    <mat-horizontal-stepper linear #stepper>\\r\\n\\r\\n\\r\\n      <mat-step [stepControl]=\\\"surveyDetailForm\\\">\\r\\n        <form [formGroup]=\\\"surveyDetailForm\\\" (ngSubmit)=\\\"submit()\\\">\\r\\n          <ng-template matStepLabel>Fill Survey Details</ng-template>\\r\\n\\r\\n          <mat-card class=\\\"p-1\\\" [@animate]=\\\"{value:'*',params:{y:'50px',delay:'300ms'}}\\\">\\r\\n\\r\\n\\r\\n            <mat-card-title class=\\\"p-0\\\">\\r\\n              <small class=\\\"text-muted\\\"> Survey Details </small>\\r\\n            </mat-card-title>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n\\r\\n              <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                  <input matInput [formControl]=\\\"surveyDetailForm.controls['topic']\\\" required name=\\\"name\\\" placeholder=\\\"Survey topic\\\">\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n\\r\\n              <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                  <mat-select [(value)]=\\\"selectedType\\\" [(ngModel)]=\\\"selectedType\\\" [formControl]=\\\"surveyDetailForm.controls['type']\\\" required\\r\\n                    placeholder=\\\"Survey Type\\\">\\r\\n                    <mat-option>none</mat-option>\\r\\n                    <mat-option *ngFor=\\\"let type of surveyTypes\\\" (click)=\\\"popuplateDropdown(type.value)\\\" [value]=\\\"type.value\\\">{{type.name}}</mat-option>\\r\\n                  </mat-select>\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n\\r\\n            </div>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n              <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n\\r\\n                <mat-form-field *ngIf='selectedType === \\\"P\\\"' class=\\\"full-width\\\">\\r\\n                  <mat-select [formControl]=\\\"surveyDetailForm.controls['productId']\\\" required placeholder=\\\"Select A Product\\\">\\r\\n                    <mat-option>none</mat-option>\\r\\n                    <mat-option *ngFor=\\\"let product of products\\\" [value]=\\\"product.id\\\">{{product.name}}</mat-option>\\r\\n                  </mat-select>\\r\\n                </mat-form-field>\\r\\n\\r\\n                <mat-form-field *ngIf='selectedType === \\\"V\\\"' class=\\\"full-width\\\">\\r\\n                  <mat-select [formControl]=\\\"surveyDetailForm.controls['voteId']\\\" required placeholder=\\\"Select An E-Vote\\\">\\r\\n                    <mat-option>none</mat-option>\\r\\n                    <mat-option *ngFor=\\\"let evote of evotes\\\" [value]=\\\"evote.id\\\">{{evote.topic}}</mat-option>\\r\\n                  </mat-select>\\r\\n                </mat-form-field>\\r\\n\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n\\r\\n              <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                  <input matInput name=\\\"startDate\\\" [matDatepicker]=\\\"picker1\\\" [formControl]=\\\"surveyDetailForm.controls['startDate']\\\" required\\r\\n                    placeholder=\\\"Start Date\\\">\\r\\n                  <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\">\\r\\n                    <mat-icon matDatepickerToggleIcon>keyboard_arrow_down</mat-icon>\\r\\n                  </mat-datepicker-toggle>\\r\\n                  <mat-datepicker #picker1></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n\\r\\n              <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                  <input matInput name=\\\"endDate\\\" [matDatepicker]=\\\"picker2\\\" [formControl]=\\\"surveyDetailForm.controls['endDate']\\\" required placeholder=\\\"End Date\\\">\\r\\n                  <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\">\\r\\n                    <mat-icon matDatepickerToggleIcon>keyboard_arrow_down</mat-icon>\\r\\n                  </mat-datepicker-toggle>\\r\\n                  <mat-datepicker #picker2></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n\\r\\n            </div>\\r\\n          </mat-card>\\r\\n\\r\\n          <div>\\r\\n            <button type='button' color=\\\"primary\\\" [disabled]=\\\"surveyDetailForm.invalid\\\" mat-button matStepperNext>Next</button>\\r\\n          </div>\\r\\n        </form>\\r\\n      </mat-step>\\r\\n\\r\\n\\r\\n\\r\\n      <mat-step [stepControl]=\\\"questionForm\\\" [optional]=\\\"isOptional\\\">\\r\\n        <form [formGroup]=\\\"questionForm\\\" (ngSubmit)=\\\"submit()\\\">\\r\\n          <ng-template matStepLabel>Setup your questions</ng-template>\\r\\n\\r\\n          <div class=\\\"text-right mb-1\\\">\\r\\n            <div class=\\\"m-333 text-right\\\">\\r\\n              <button type='button' mat-raised-button class=\\\"mb-05\\\" (click)=\\\"addQuestion()\\\" color=\\\"accent\\\">Add Question</button>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <mat-card formArrayName='questions' *ngFor=\\\"let question of questionForm.controls['questions'].controls; let i=index\\\" class=\\\"p-1\\\"\\r\\n            [@animate]=\\\"{value:'*',params:{y:'50px',delay:'300ms'}}\\\">\\r\\n\\r\\n            <mat-card-title class=\\\"p-0\\\">\\r\\n              <small class=\\\"text-muted\\\"> Question {{i+1}} </small>\\r\\n            </mat-card-title>\\r\\n\\r\\n            <div [formGroupName]=\\\"i\\\">\\r\\n              <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                  <input matInput formControlName=\\\"name\\\" required name=\\\"lable\\\" placeholder=\\\"Type your Question\\\">\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n\\r\\n              <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                  <mat-select formControlName=\\\"answerTemplate\\\" required placeholder=\\\"Choose Answer Template\\\">\\r\\n                    <mat-option>None</mat-option>\\r\\n                    <mat-option *ngFor='let template of ansTemplates'  [value]=\\\"template.id\\\">{{template.name}}</mat-option>\\r\\n                  </mat-select>\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n\\r\\n              <div fxFlex=\\\"20\\\" class=\\\"pr-0\\\">\\r\\n                <button type='button' mat-raised-button *ngIf=\\\"questionForm.controls['questions'].controls.length > 1\\\" (click)='removeQuestion(i)'\\r\\n                  color=\\\"warn\\\">Remove</button>\\r\\n              </div>\\r\\n\\r\\n            </div>\\r\\n          </mat-card>\\r\\n\\r\\n          <div>\\r\\n            <button type='button' mat-button color=\\\"primary\\\" matStepperPrevious>Back</button>\\r\\n            <button color=\\\"primary\\\" [disabled]=\\\"questionForm.invalid\\\" mat-button matStepperNext>Submit Question</button>\\r\\n          </div>\\r\\n\\r\\n        </form>\\r\\n      </mat-step>\\r\\n\\r\\n\\r\\n      <mat-step>\\r\\n\\r\\n        <ng-template matStepLabel>Review</ng-template>\\r\\n\\r\\n        <mat-card class=\\\"p-2\\\" [@animate]=\\\"{value:'*',params:{y:'50px',delay:'300ms'}}\\\">\\r\\n\\r\\n\\r\\n\\r\\n          <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n            <mat-card-title class=\\\"p-0\\\">\\r\\n              Please Review your survey details\\r\\n            </mat-card-title>\\r\\n            <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\">\\r\\n              <b>Survey Topic : </b> <span class=\\\"text-muted\\\">{{ surveyDetailForm.controls['topic'].value }} </span>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\" *ngIf='selectedType === \\\"P\\\"'>\\r\\n              <b>Survey Source : </b> <span class=\\\"text-muted\\\" *ngFor='let product of products | arrayFilter : surveyDetailForm.controls[\\\"productId\\\"].value : \\\"products\\\" '>\\r\\n                {{product.name }} </span>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\" *ngIf='selectedType === \\\"V\\\"'>\\r\\n                <b>Survey Source : </b><span class=\\\"text-muted\\\" *ngFor='let evote of evotes | arrayFilter : surveyDetailForm.controls[\\\"voteId\\\"].value : \\\"evotes\\\" '>\\r\\n                    {{evote.topic }} </span>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\">\\r\\n              <b>Survey Start Date : </b> <span class=\\\"text-muted\\\">{{ surveyDetailForm.controls['startDate'].value }} </span>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\">\\r\\n              <b>Survey End Date : </b> <span class=\\\"text-muted\\\">{{ surveyDetailForm.controls['endDate'].value }} </span>\\r\\n            </div>\\r\\n          </div>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card class=\\\"p-2\\\" [@animate]=\\\"{value:'*',params:{y:'50px',delay:'300ms'}}\\\">\\r\\n          <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n            <mat-card-title class=\\\"p-0\\\">\\r\\n              Review Survey Questions\\r\\n            </mat-card-title>\\r\\n\\r\\n            <div *ngFor=\\\"let question of questionForm.controls['questions'].controls; let i=index \\\" fxFlex=\\\"100\\\" class=\\\"timeline-body-top\\\">\\r\\n              <span href=\\\"#\\\" class=\\\"timeline-body-title mr-1\\\"><b>Question {{i+1}}</b></span>\\r\\n              <span class=\\\"text-muted\\\">{{question.value.name}}</span><br>\\r\\n\\r\\n              <div *ngIf=\\\"question.value.answerTemplate\\\">\\r\\n                <div class=\\\"p-1\\\" *ngFor='let temp of ansTemplates | arrayFilter:question.value.answerTemplate:\\\"answer_types\\\" ;' class=\\\"timeline-body-top\\\">\\r\\n                  <span class=\\\"text-muted\\\" *ngFor='let ans of temp.answers; let a=index '>{{a+1}}. {{ans.lable}}<br></span>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n            </div>\\r\\n\\r\\n          </div>\\r\\n        </mat-card>\\r\\n\\r\\n        <div>\\r\\n          <button type='button' mat-button color=\\\"primary\\\" matStepperPrevious>Back</button>\\r\\n          <button type='button' mat-button color=\\\"primary\\\" [disabled]=\\\"questionForm.invalid\\\" matStepperNext>Next</button>\\r\\n        </div>\\r\\n\\r\\n      </mat-step>\\r\\n\\r\\n\\r\\n      <mat-step>\\r\\n        <ng-template matStepLabel>Done</ng-template>\\r\\n        You are now done.\\r\\n        <div>\\r\\n          <button type='button' mat-button color=\\\"primary\\\" matStepperPrevious>Back</button>\\r\\n          <button type='button' mat-button color=\\\"primary\\\">Done</button>\\r\\n        </div>\\r\\n      </mat-step>\\r\\n\\r\\n    </mat-horizontal-stepper>\\r\\n\\r\\n\\r\\n\\r\\n  </mat-card-content>\\r\\n</mat-card>\\r\\n\"","import { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { egretAnimations } from \"../../../shared/animations/egret-animations\";\r\nimport { LayoutService } from \"../../../shared/services/layout.service\";\r\nimport { FormGroup, FormBuilder, Validators, FormArray } from \"@angular/forms\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { AppLoaderService } from \"../../../shared/services/app-loader/app-loader.service\";\r\nimport { ResponseModel } from \"../../../model/ResponseModel.model\";\r\nimport { Subscription } from \"rxjs\";\r\n\r\nimport { ProductCrudService } from \"../../product-crud/product-crud.service\";\r\nimport {\r\n  DateAdapter,\r\n  MAT_DATE_LOCALE,\r\n  MAT_DATE_FORMATS\r\n} from \"@angular/material\";\r\nimport { MomentDateAdapter } from \"@angular/material-moment-adapter\";\r\nimport { SurveyCommonComponent } from \"../survey-common.component\";\r\nimport { EvoteService } from \"../../evote/evote-service.service\";\r\nimport { SurveyService } from \"../survey.service\";\r\nimport { AppErrorService } from \"../../../shared/services/app-error/app-error.service\";\r\nimport { SurveyModel } from \"../../../model/SurveyRequest.model\";\r\n\r\nexport const MY_FORMATS = {\r\n  parse: {\r\n    dateInput: \"YYYY-MM-DD\"\r\n  },\r\n  display: {\r\n    dateInput: \"YYYY-MM-DD\",\r\n    monthYearLabel: \"MMM YYYY\",\r\n    dateA11yLabel: \"YYYY-MM-DD\",\r\n    monthYearA11yLabel: \"MMMM YYYY\"\r\n  }\r\n};\r\n\r\n@Component({\r\n  selector: \"app-survey-builder\",\r\n  templateUrl: \"./survey-builder.component.html\",\r\n  animations: egretAnimations,\r\n  providers: [\r\n    {\r\n      provide: DateAdapter,\r\n      useClass: MomentDateAdapter,\r\n      deps: [MAT_DATE_LOCALE]\r\n    },\r\n    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS }\r\n  ]\r\n})\r\nexport class SurveyBuilderComponent extends SurveyCommonComponent\r\n  implements OnInit {\r\n  surveyDetailForm: FormGroup;\r\n  questionForm: FormGroup;\r\n\r\n  sub: any;\r\n  isOptional = false;\r\n  surveyName: string;\r\n  surveyId: string;\r\n  surveyQuestions: any[] = [];\r\n\r\n  getAnswersTemplatesSub: Subscription;\r\n  ansTemplates: any[];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    public productService: ProductCrudService,\r\n    public evoteService: EvoteService,\r\n    public surveyService: SurveyService,\r\n    private errDialog: AppErrorService,\r\n    private loader: AppLoaderService\r\n  ) {\r\n    super(productService, evoteService);\r\n  }\r\n\r\n  getAllAnsTemplates() {\r\n    this.getAnswersTemplatesSub = this.surveyService\r\n      .getAnswerTemplates()\r\n      .subscribe(\r\n        successResp => {\r\n          this.ansTemplates = successResp.content;\r\n        },\r\n        error => {\r\n          this.errDialog.showError({\r\n            title: \"Error\",\r\n            status: error.status,\r\n            type: \"http_error\"\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.sub = this.route.queryParams.subscribe(params => {\r\n      let id = params[\"id\"];\r\n      let name = params[\"name\"];\r\n      let type = params[\"type\"];\r\n      let productId = params[\"productId\"];\r\n      let voteId = params[\"voteId\"];\r\n      let startDate = params[\"startDate\"];\r\n      let endDate = params[\"endDate\"];\r\n      let questions = params[\"questions\"];\r\n\r\n      this.surveyName = name;\r\n      this.surveyId = id;\r\n      console.log(\"id :\" + id);\r\n      console.log(\"name :\" + name);\r\n      console.log(\"type :\" + type);\r\n      console.log(\"productId :\" + productId);\r\n      console.log(\"voteId :\" + voteId);\r\n      console.log(\"startDate :\" + startDate);\r\n      console.log(\"endDate :\" + endDate);\r\n      console.log(\"questions :\");\r\n      if (questions) {\r\n        console.log(JSON.parse(questions));\r\n      }\r\n\r\n      this.selectedType = type;\r\n\r\n      this.buildSurveyForm(name, type, productId, voteId, startDate, endDate);\r\n      this.buildQuestionForm(questions);\r\n      this.getAllAnsTemplates();\r\n      this.popuplateDropdown(this.selectedType);\r\n    });\r\n  }\r\n\r\n  buildSurveyForm(name, type, productId, voteId, startDate, endDate) {\r\n    this.surveyDetailForm = this.fb.group({\r\n      topic: [name || \"\"],\r\n      type: [type || \"\"],\r\n      productId: [productId || \"\"],\r\n      voteId: [voteId || \"\"],\r\n      startDate: [startDate, Validators.required],\r\n      endDate: [endDate, Validators.required]\r\n    });\r\n  }\r\n\r\n  buildQuestionForm(questions) {\r\n    this.questionForm = this.fb.group({\r\n      questions: this.fb.array([])\r\n    });\r\n    this.patch(questions);\r\n  }\r\n\r\n  patch(fields?) {\r\n    console.log(\"patch called\");\r\n\r\n    const control = <FormArray>this.questionForm.controls[\"questions\"];\r\n    console.log(\"length  and obj  : \" + control.length);\r\n    console.log(control);\r\n\r\n    if (fields == null) {\r\n      console.log(\"after imidiate survey creation\");\r\n      control.push(this.initQuestionTemplate());\r\n      return;\r\n    }\r\n\r\n    let questionArray = JSON.parse(fields);\r\n    console.log(\"question array length\");\r\n    console.log(questionArray.length);\r\n    if (questionArray.length == 0) {\r\n      console.log(\"without question loading situation\");\r\n      control.push(this.initQuestionTemplate());\r\n      return;\r\n    }\r\n\r\n    questionArray.forEach(x => {\r\n      if (x.id) {\r\n        this.surveyService.getQuestionById(x.id).subscribe(response => {\r\n          console.log(\"QUESTION BY ID : \");\r\n          console.log(response);\r\n          console.log(\"this.surveyQuestions\");\r\n          console.log(this.surveyQuestions);\r\n          this.surveyQuestions.unshift(response);\r\n          control.push(\r\n            this.initQuestionTemplate(response.name, response.answerTemplate)\r\n          );\r\n        });\r\n      }\r\n    });\r\n\r\n    console.log(\"myquestions : \");\r\n    console.log(this.surveyQuestions);\r\n  }\r\n\r\n  initQuestionTemplate(name?, answerTemplate?) {\r\n    let anstempVal = answerTemplate ? answerTemplate.id : null;\r\n    console.log(\"anstempVAL : \" + anstempVal);\r\n    return this.fb.group({\r\n      name: [name || \"\"],\r\n      answerTemplate: [anstempVal || \"\"]\r\n    });\r\n  }\r\n\r\n  addQuestion() {\r\n    const question = <FormArray>this.questionForm.controls[\"questions\"];\r\n    question.push(this.initQuestionTemplate());\r\n  }\r\n\r\n  removeQuestion(index: number) {\r\n    const question = <FormArray>this.questionForm.controls[\"questions\"];\r\n    question.removeAt(index);\r\n  }\r\n\r\n  hideRemoveButton() {\r\n    return this.questionForm.controls[\"answers\"].value.length > 1;\r\n  }\r\n\r\n  submit() {\r\n\r\n    this.loader.open('Questions are upadating')\r\n\r\n    let surveyReq = new SurveyModel({\r\n      topic: this.surveyDetailForm.value.topic,\r\n      type: this.surveyDetailForm.value.type,\r\n      startDate: this.surveyDetailForm.value.startDate,\r\n      endDate: this.surveyDetailForm.value.endDate,\r\n      productId: this.surveyDetailForm.value.productId,\r\n      voteId: this.surveyDetailForm.value.voteId,\r\n      questions: this.questionForm.value.questions\r\n    });\r\n\r\n    console.log('final request : ');\r\n    console.log(surveyReq);\r\n    let jOb =  JSON.stringify(surveyReq);\r\n    console.log(jOb)\r\n    console.log(JSON.parse(jOb));\r\n    this.updateSurveyWithQuestions(this.surveyId, surveyReq);\r\n  }\r\n\r\n  updateSurveyWithQuestions(id, surveyObj) {\r\n    console.log(\"sueveyobject\");\r\n    console.log(surveyObj);\r\n    this.surveyService.updateSurveyWithQuestions(id, surveyObj).subscribe(\r\n      response => {\r\n        console.log(\"response after update questions\");\r\n        console.log(response.content);\r\n        this.loader.close();\r\n      },\r\n      error => {\r\n        this.loader.close();\r\n        this.errDialog.showError({\r\n          title: \"Error\",\r\n          status: error.status,\r\n          type: \"http_error\"\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  // checkQuestions(){\r\n  //   console.log('question : ');\r\n  //   console.log(this.questionForm.controls['questions']);\r\n  // }\r\n\r\n  surveyTypes = [\r\n    {\r\n      name: \"Product Survey\",\r\n      value: \"P\"\r\n    },\r\n    {\r\n      name: \"Evote Survey\",\r\n      value: \"V\"\r\n    }\r\n  ];\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { ResponseModel } from \"../../model/ResponseModel.model\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { ProductCrudService } from \"../product-crud/product-crud.service\";\r\nimport { EvoteService } from \"../evote/evote-service.service\";\r\n\r\n@Component({\r\n  selector: \"survey-common\",\r\n  template: \"\"\r\n})\r\nexport class SurveyCommonComponent {\r\n  public response: ResponseModel;\r\n  selectedType: any;\r\n  getProductsSub: Subscription;\r\n  getEvotesSub: Subscription;\r\n  public products: any[] = [];\r\n  public evotes: any[] = [];\r\n\r\n   typeMap: Map<string, string>;\r\n\r\n  constructor(\r\n    public productService: ProductCrudService,\r\n    public evoteService: EvoteService\r\n  ) {}\r\n\r\n  popuplateDropdown(value) {\r\n    console.log(\"PASSED TYPE  \" + value);\r\n\r\n    switch (this.selectedType) {\r\n      case \"P\":\r\n        this.getProducts();\r\n        break;\r\n      case \"V\":\r\n        this.getEvotes();\r\n        break;\r\n      default:\r\n        this.getProducts();\r\n        break;\r\n    }\r\n  }\r\n\r\n  getProducts() {\r\n    console.log(\"called PRODUCTS \" + this.products.length);\r\n    if (this.products.length === 0) {\r\n      this.getProductsSub = this.productService\r\n        .getAllProductSuggestions()\r\n        .subscribe(data => {\r\n          this.response = data;\r\n          this.products = this.response.content;\r\n        });\r\n    }\r\n  }\r\n\r\n  getEvotes() {\r\n    console.log(\"called EVOTES \" + this.evotes.length);\r\n    if (this.evotes.length === 0) {\r\n      this.getEvotesSub = this.evoteService.getAllEvotesSuggestions().subscribe(data => {\r\n        this.response = data;\r\n        this.evotes = this.response.content;\r\n        console.log(this.evotes);\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","module.exports = \"<h1 matDialogTitle>{{data.title}}</h1>\\r\\n\\r\\n<form [formGroup]=\\\"surveyForm\\\" (ngSubmit)=\\\"submit()\\\">\\r\\n  <mat-dialog-content class=\\\"mat-typography\\\">\\r\\n\\r\\n    <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n      <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput [formControl]=\\\"surveyForm.controls['topic']\\\" required name=\\\"topic\\\" placeholder=\\\"Survey topic\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n\\r\\n      <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <mat-select [(value)]=\\\"selectedType\\\" [(ngModel)]=\\\"selectedType\\\" [formControl]=\\\"surveyForm.controls['type']\\\" required placeholder=\\\"Survey Type\\\">\\r\\n            <mat-option>none</mat-option>\\r\\n            <mat-option *ngFor=\\\"let type of surveyTypes\\\" (click)=\\\"popuplateDropdown(type.value)\\\" [value]=\\\"type.value\\\">{{type.name}}</mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n\\r\\n\\r\\n      <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\">\\r\\n\\r\\n        <mat-form-field *ngIf='selectedType === \\\"P\\\"' class=\\\"full-width\\\">\\r\\n          <mat-select [formControl]=\\\"surveyForm.controls['productId']\\\" required placeholder=\\\"Select A Product\\\">\\r\\n            <mat-option>none</mat-option>\\r\\n            <mat-option *ngFor=\\\"let product of products\\\" [value]=\\\"product.id\\\">{{product.name}}</mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n\\r\\n        <mat-form-field *ngIf='selectedType === \\\"V\\\"' class=\\\"full-width\\\">\\r\\n          <mat-select [formControl]=\\\"surveyForm.controls['voteId']\\\" required placeholder=\\\"Select An E-Vote\\\">\\r\\n            <mat-option>none</mat-option>\\r\\n            <mat-option *ngFor=\\\"let evote of evotes\\\" [value]=\\\"evote.id\\\">{{evote.topic}}</mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n\\r\\n      </div>\\r\\n\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput name=\\\"startDate\\\" [matDatepicker]=\\\"picker1\\\" [formControl]=\\\"surveyForm.controls['startDate']\\\" required placeholder=\\\"Start Date\\\">\\r\\n          <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\">\\r\\n            <mat-icon matDatepickerToggleIcon>keyboard_arrow_down</mat-icon>\\r\\n          </mat-datepicker-toggle>\\r\\n          <mat-datepicker #picker1></mat-datepicker>\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n\\r\\n\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput name=\\\"endDate\\\" [matDatepicker]=\\\"picker2\\\" [formControl]=\\\"surveyForm.controls['endDate']\\\" required placeholder=\\\"End Date\\\">\\r\\n          <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\">\\r\\n            <mat-icon matDatepickerToggleIcon>keyboard_arrow_down</mat-icon>\\r\\n          </mat-datepicker-toggle>\\r\\n          <mat-datepicker #picker2></mat-datepicker>\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n\\r\\n\\r\\n    </div>\\r\\n\\r\\n\\r\\n\\r\\n  </mat-dialog-content>\\r\\n\\r\\n  <!-- routerLink=\\\"/surveys/builder_v1\\\" -->\\r\\n  <mat-dialog-actions align=\\\"end\\\">\\r\\n    <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"surveyForm.invalid\\\">Save</button>\\r\\n    <span fxFlex></span>\\r\\n    <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n  </mat-dialog-actions>\\r\\n\\r\\n</form>\\r\\n\"","import { Component, OnInit, Inject, OnDestroy } from \"@angular/core\";\r\nimport { egretAnimations } from \"../../../shared/animations/egret-animations\";\r\nimport {\r\n  MAT_DIALOG_DATA,\r\n  MatDialogRef,\r\n  DateAdapter,\r\n  MAT_DATE_LOCALE,\r\n  MAT_DATE_FORMATS\r\n} from \"@angular/material\";\r\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\r\nimport { LayoutService } from \"../../../shared/services/layout.service\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { ProductCrudService } from \"../../product-crud/product-crud.service\";\r\nimport { ResponseModel } from \"../../../model/ResponseModel.model\";\r\n\r\nimport { MomentDateAdapter } from \"@angular/material-moment-adapter\";\r\n\r\nimport { SurveyCommonComponent } from \"../survey-common.component\";\r\nimport { EvoteService } from \"../../evote/evote-service.service\";\r\n\r\nexport const MY_FORMATS = {\r\n  parse: {\r\n    dateInput: \"YYYY-MM-DD\"\r\n  },\r\n  display: {\r\n    dateInput: \"YYYY-MM-DD\",\r\n    monthYearLabel: \"MMM YYYY\",\r\n    dateA11yLabel: \"YYYY-MM-DD\",\r\n    monthYearA11yLabel: \"MMMM YYYY\"\r\n  }\r\n};\r\n\r\n@Component({\r\n  selector: \"app-survey-creation-popup\",\r\n  templateUrl: \"./survey-creation-popup.component.html\",\r\n  animations: egretAnimations,\r\n  providers: [\r\n    {\r\n      provide: DateAdapter,\r\n      useClass: MomentDateAdapter,\r\n      deps: [MAT_DATE_LOCALE]\r\n    },\r\n    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS }\r\n  ]\r\n})\r\nexport class SurveyCreationPopupComponent extends SurveyCommonComponent\r\n  implements OnInit, OnDestroy {\r\n  public surveyForm: FormGroup;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private fb: FormBuilder,\r\n    public dialogRef: MatDialogRef<SurveyCreationPopupComponent>,\r\n    public productService: ProductCrudService,\r\n    public evoteService: EvoteService\r\n  ) {\r\n    super(productService, evoteService);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.buildSurveyForm(this.data.payload);\r\n    console.log(\"this.data.payload.type : \" + this.data.payload.type);\r\n    this.selectedType = this.data.payload.type;\r\n    console.log(\"this.selectedType : \" + this.selectedType);\r\n    this.popuplateDropdown(this.selectedType);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.getProductsSub) {\r\n      this.getProductsSub.unsubscribe();\r\n    }\r\n    if (this.getEvotesSub) {\r\n      this.getEvotesSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  buildSurveyForm(fieldItem) {\r\n    this.surveyForm = this.fb.group({\r\n      topic: [fieldItem.topic || \"\"],\r\n      type: [fieldItem.type || \"\"],\r\n      productId: [fieldItem.productId || \"\"],\r\n      voteId: [fieldItem.voteId || \"\"],\r\n      startDate: [fieldItem.startDate, Validators.required],\r\n      endDate: [fieldItem.endDate, Validators.required]\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    console.log(JSON.stringify(this.surveyForm.value));\r\n    this.dialogRef.close(this.surveyForm.value);\r\n  }\r\n\r\n  surveyTypes = [\r\n    {\r\n      name: \"Product Survey\",\r\n      value: \"P\"\r\n    },\r\n    {\r\n      name: \"Evote Survey\",\r\n      value: \"V\"\r\n    }\r\n  ];\r\n}\r\n","module.exports = \"<mat-card class=\\\"p-0\\\" [@animate]=\\\"{value:'*',params:{y:'50px',delay:'300ms'}}\\\">\\r\\n  <mat-card-title>\\r\\n    <div class=\\\"card-title-text\\\">Survey Settings</div>\\r\\n    <mat-divider></mat-divider>\\r\\n  </mat-card-title>\\r\\n  <mat-card-content class=\\\"p-0\\\">\\r\\n    <div class=\\\"text-muted mb-1 m-1 text-left\\\">\\r\\n      you can configure your survey question answer with adding different options per answer. To setup your predefined answer template,\\r\\n      navigate to \\\"Answser template section \\\" by clicking \\\"Create Answer template\\\" button.\\r\\n    </div>\\r\\n    <div class=\\\"profile-actions text-right mb-1\\\">\\r\\n      <div class=\\\"m-333 text-right\\\">\\r\\n        <button mat-raised-button (click)=\\\"openAnswerTemplatePopup({},true)\\\" class=\\\"mb-05\\\" color=\\\"accent\\\">Create Answer template</button>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <mat-divider></mat-divider>\\r\\n\\r\\n    <mat-accordion>\\r\\n      <mat-expansion-panel>\\r\\n        <mat-expansion-panel-header>\\r\\n          <mat-panel-title>\\r\\n            Answer templates\\r\\n          </mat-panel-title>\\r\\n          <mat-panel-description>\\r\\n            View or Edit Predefined Answer template\\r\\n          </mat-panel-description>\\r\\n        </mat-expansion-panel-header>\\r\\n\\r\\n        <ngx-datatable class=\\\"material bg-white\\\" [columnMode]=\\\"'force'\\\" [headerHeight]=\\\"50\\\" [footerHeight]=\\\"50\\\" [rowHeight]=\\\"'auto'\\\"\\r\\n          [limit]=\\\"5\\\" [rows]=\\\"rows\\\">\\r\\n\\r\\n          <ngx-datatable-column name=\\\"Template Name\\\" [flexGrow]=\\\"1\\\">\\r\\n            <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n              {{row?.name}}\\r\\n            </ng-template>\\r\\n          </ngx-datatable-column>\\r\\n          <ngx-datatable-column name=\\\"Answer type\\\" [flexGrow]=\\\"1\\\">\\r\\n            <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n              <mat-chip mat-sm-chip *ngIf='row?.answerTemplateType ==\\\"M\\\"'   color=\\\"accent\\\" [selected]=\\\"true\\\" >Multiple Option</mat-chip>\\r\\n              <mat-chip mat-sm-chip *ngIf='row?.answerTemplateType ==\\\"S\\\"'   color=\\\"primary\\\" [selected]=\\\"true\\\" >Single Option</mat-chip>\\r\\n              <mat-chip mat-sm-chip *ngIf='row?.answerTemplateType ==\\\"F\\\"'   color=\\\"default\\\" [selected]=\\\"true\\\" >Free Text</mat-chip>\\r\\n            </ng-template>\\r\\n          </ngx-datatable-column>\\r\\n          <ngx-datatable-column name=\\\"Action\\\" [flexGrow]=\\\"1\\\">\\r\\n            <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n              <button mat-icon-button mat-sm-button  [disabled]='row?.answerTemplateType ==\\\"F\\\"'  (click)=\\\"getAnsTemplateById(row.id)\\\" color=\\\"primary\\\" class=\\\"mr-1\\\"><mat-icon>edit</mat-icon></button>\\r\\n              <button mat-icon-button mat-sm-button (click)=\\\"deleteAnsTemplate(row)\\\" color=\\\"warn\\\"  class=\\\"mr-1\\\" ><mat-icon>delete</mat-icon></button>\\r\\n            </ng-template>\\r\\n          </ngx-datatable-column>\\r\\n        </ngx-datatable>\\r\\n\\r\\n\\r\\n      </mat-expansion-panel>\\r\\n    </mat-accordion>\\r\\n\\r\\n  </mat-card-content>\\r\\n</mat-card>\\r\\n\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { egretAnimations } from \"../../../shared/animations/egret-animations\";\r\nimport { MatDialog, MatDialogRef } from \"@angular/material\";\r\nimport { AnswerTemplatePopupComponent } from \"../answer-template-popup/answer-template-popup.component\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { SurveyService } from \"../survey.service\";\r\nimport { AppErrorService } from \"../../../shared/services/app-error/app-error.service\";\r\nimport { AppLoaderService } from \"../../../shared/services/app-loader/app-loader.service\";\r\nimport { AppConfirmService } from \"../../../shared/services/app-confirm/app-confirm.service\";\r\nimport { SurveyTableComponent } from \"../survey-table/survey-table.component\";\r\nimport { filter } from \"rxjs/operators\";\r\n\r\n@Component({\r\n  selector: \"app-survey-setting\",\r\n  templateUrl: \"./survey-setting.component.html\",\r\n  animations: egretAnimations\r\n})\r\nexport class SurveySettingComponent implements OnInit {\r\n  rows: any[];\r\n  public getAnswersTemplatesSub: Subscription;\r\n\r\n  public defaultAnswerTemplate: any = {\r\n    name: \"Free Text Answer\",\r\n    answerTemplateType: \"F\",\r\n    answers: [{ lable: \"\", value: 1, optionNumber: 1 }]\r\n  };\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private surveyService: SurveyService,\r\n    private errDialog: AppErrorService,\r\n    private loader: AppLoaderService,\r\n    private confirmService: AppConfirmService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.getAllAnsTemplates();\r\n  }\r\n\r\n  defaultTemplateCreate(templates: any) {\r\n    console.log(\"passed rows :\");\r\n    console.log(templates);\r\n    let result = templates.filter(\r\n      item => item.answerTemplateType.indexOf(\"F\") !== -1\r\n    );\r\n    if (result.length === 0) {\r\n      console.log(\"need to create Free text \");\r\n      this.loader.open(\"Installing Default Settings\");\r\n      console.log(this.defaultAnswerTemplate);\r\n      this.surveyService\r\n        .addNewAnsTemplate(this.defaultAnswerTemplate,this.rows)\r\n        .subscribe(\r\n          data => {\r\n            this.rows = data;\r\n            this.loader.close();\r\n          },\r\n          error => {\r\n            this.loader.close();\r\n            this.errDialog.showError({\r\n              title: \"Error\",\r\n              status: error.status,\r\n              type: \"http_error\"\r\n            });\r\n          }\r\n        );\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.getAnswersTemplatesSub) {\r\n      this.getAnswersTemplatesSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  getAllAnsTemplates() {\r\n    this.getAnswersTemplatesSub = this.surveyService\r\n      .getAnswerTemplates()\r\n      .subscribe(\r\n        successResp => {\r\n          this.rows = successResp.content;\r\n          console.log(this.rows);\r\n          this.defaultTemplateCreate(this.rows);\r\n        },\r\n        error => {\r\n          console.log(error);\r\n          console.log(error.status);\r\n          this.errDialog.showError({\r\n            title: \"Error\",\r\n            status: error.status,\r\n            type: \"http_error\"\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  openAnswerTemplatePopup(data: any = {}, isNew?) {\r\n    let title = isNew ? \"Add New Answer Template \" : \"Update Answer Template \";\r\n    let dialogRef: MatDialogRef<any> = this.dialog.open(\r\n      AnswerTemplatePopupComponent,\r\n      {\r\n        width: \"720px\",\r\n        disableClose: true,\r\n        data: { title: title, payload: data }\r\n      }\r\n    );\r\n\r\n    dialogRef.afterClosed().subscribe(res => {\r\n      if (!res) {\r\n        return;\r\n      }\r\n      this.loader.open();\r\n      if (isNew) {\r\n        this.surveyService.addNewAnsTemplate(res, this.rows).subscribe(\r\n          data => {\r\n            console.log(\"response of creation \");\r\n            console.log(data);\r\n            this.rows = data;\r\n            this.loader.close();\r\n          },\r\n          error => {\r\n            this.loader.close();\r\n            this.errDialog.showError({\r\n              title: \"Error\",\r\n              status: error.status,\r\n              type: \"http_error\"\r\n            });\r\n          }\r\n        );\r\n      } else {\r\n        this.surveyService.updateAnsTemplate(data.id, res).subscribe(\r\n          response => {\r\n            console.log(response.content);\r\n            this.rows = this.rows.map(i => {\r\n              if (i.id === data.id) {\r\n                return Object.assign({}, i, response.content);\r\n              }\r\n              return i;\r\n            });\r\n\r\n            this.loader.close();\r\n            return this.rows.slice();\r\n          },\r\n          error => {\r\n            this.loader.close();\r\n            this.errDialog.showError({\r\n              title: \"Error\",\r\n              status: error.status,\r\n              type: \"http_error\"\r\n            });\r\n          }\r\n        );\r\n      }\r\n\r\n      console.log(\"input : \");\r\n      console.log(JSON.stringify(res));\r\n    });\r\n  }\r\n\r\n  deleteAnsTemplate(row) {\r\n    this.confirmService\r\n      .confirm({ message: `Delete ${row.name}?` })\r\n      .subscribe(res => {\r\n        if (res) {\r\n          this.loader.open();\r\n          this.surveyService.removeAnsTemplate(row, this.rows).subscribe(\r\n            data => {\r\n              console.log(data);\r\n              this.rows = data;\r\n              this.loader.close();\r\n            },\r\n            error => {\r\n              this.loader.close();\r\n              this.errDialog.showError({\r\n                title: \"Error\",\r\n                status: error.status,\r\n                type: \"http_error\"\r\n              });\r\n            }\r\n          );\r\n        }\r\n      });\r\n  }\r\n\r\n  //for the movement unused\r\n  getAnsTemplateById(id) {\r\n    this.surveyService.getAnsTemplateById(id, this.rows).subscribe(\r\n      successResp => {\r\n        console.log(\"by id response\");\r\n        console.log(successResp);\r\n        this.openAnswerTemplatePopup(successResp);\r\n      },\r\n      error => {\r\n        this.errDialog.showError({\r\n          title: \"Error\",\r\n          status: error.status,\r\n          type: \"http_error\"\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  //{\"name\":\"Free text \",\"answerTemplateType\":\"M\",\"answers\":[{\"lable\":\"fee\",\"value\":1,\"optionNumber\":1}]}\r\n}\r\n","module.exports = \"<mat-card class=\\\"p-0\\\" [@animate]=\\\"{value:'*',params:{y:'50px',delay:'300ms'}}\\\" >\\r\\n  <mat-card-title>\\r\\n    <div class=\\\"card-title-text\\\">Survey Summary</div>\\r\\n    <mat-divider></mat-divider>\\r\\n\\r\\n    <div class=\\\"profile-actions text-right mb-1\\\">\\r\\n        <div class=\\\"m-333\\\">\\r\\n          <button mat-raised-button class=\\\"mb-05\\\" (click)='openSurveyPopup({},true)' color=\\\"primary\\\">Add Survey</button>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n\\r\\n  </mat-card-title>\\r\\n  <mat-card-content class=\\\"p-0\\\">\\r\\n    <ngx-datatable class=\\\"material bg-white\\\" [columnMode]=\\\"'force'\\\" [headerHeight]=\\\"50\\\" [footerHeight]=\\\"50\\\" [rowHeight]=\\\"'auto'\\\"\\r\\n      [limit]=\\\"5\\\" [rows]=\\\"rows\\\">\\r\\n      <ngx-datatable-column name=\\\"Survey Topic\\\" [minWidth]=\\\"250\\\"  [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          {{row?.topic}}\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n      <ngx-datatable-column name=\\\"Survey Type\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n           <mat-chip mat-sm-chip color=\\\"primary\\\" [selected]=\\\"true\\\" >{{row?.type =='P' ? 'Product' : 'E Vote'}}</mat-chip>\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n      <!-- <ngx-datatable-column name=\\\"Survey Source\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          {{row?.productId}}\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column> -->\\r\\n      <ngx-datatable-column name=\\\"Start Date\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          {{row?.startDate}}\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n      <ngx-datatable-column name=\\\"End Date\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          {{row?.endDate}}\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n      <ngx-datatable-column name=\\\"Action\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n            <button mat-icon-button mat-sm-button (click)='navigateSurveyBuilder(row)' color=\\\"primary\\\" class=\\\"mr-1\\\"><mat-icon>view_headline</mat-icon></button>\\r\\n          <button mat-icon-button mat-sm-button (click)='openSurveyPopup(row,false)' color=\\\"primary\\\" class=\\\"mr-1\\\"><mat-icon>edit</mat-icon></button>\\r\\n          <button mat-icon-button mat-sm-button (click)=\\\"deleteSurvey(row)\\\"  color=\\\"warn\\\" class=\\\"mr-1\\\" ><mat-icon>delete</mat-icon></button>\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n    </ngx-datatable>\\r\\n\\r\\n\\r\\n  </mat-card-content>\\r\\n</mat-card>\\r\\n\"","import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { egretAnimations } from \"../../../shared/animations/egret-animations\";\r\nimport { SurveyCreationPopupComponent } from \"../survey-creation-popup/survey-creation-popup.component\";\r\nimport { MatDialogRef, MatDialog } from \"@angular/material\";\r\nimport { LayoutService } from \"../../../shared/services/layout.service\";\r\nimport { NavigationExtras, Router } from \"@angular/router\";\r\nimport { AppLoaderService } from \"../../../shared/services/app-loader/app-loader.service\";\r\nimport * as moment from \"moment\";\r\nimport { SurveyService } from \"../survey.service\";\r\nimport { AppErrorService } from \"../../../shared/services/app-error/app-error.service\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { AppConfirmService } from \"../../../shared/services/app-confirm/app-confirm.service\";\r\n\r\n@Component({\r\n  selector: \"app-survey-table\",\r\n  templateUrl: \"./survey-table.component.html\",\r\n  animations: egretAnimations\r\n})\r\nexport class SurveyTableComponent implements OnInit, OnDestroy {\r\n  rows: any[];\r\n  getSurveysSub: Subscription;\r\n  typeMap: Map<string, string>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private router: Router,\r\n    private surveyService: SurveyService,\r\n    private loader: AppLoaderService,\r\n    private errDialog: AppErrorService,\r\n    private confirmService: AppConfirmService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.getAllSurvey();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.getSurveysSub) {\r\n      this.getSurveysSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  onDetailToggle(value) {\r\n    console.log(\"cliecked : \" + value);\r\n  }\r\n\r\n  openSurveyPopup(data: any = {}, isNew?) {\r\n    let title = isNew ? \"Add New Survey \" : \"Update Survey \";\r\n    let dialogRef: MatDialogRef<any> = this.dialog.open(\r\n      SurveyCreationPopupComponent,\r\n      {\r\n        width: \"720px\",\r\n        disableClose: true,\r\n        data: { title: title, payload: data }\r\n      }\r\n    );\r\n\r\n    dialogRef.afterClosed().subscribe(res => {\r\n      if (!res) {\r\n        return;\r\n      }\r\n      this.loader.open();\r\n\r\n      res.startDate = moment(res.startDate).format(\"YYYY-MM-DD\");\r\n      res.endDate = moment(res.endDate).format(\"YYYY-MM-DD\");\r\n\r\n      console.log(\"INPUT : \");\r\n      console.log(JSON.stringify(res));\r\n\r\n      if (isNew) {\r\n        this.surveyService.addNewSurvey(res, this.rows).subscribe(\r\n          data => {\r\n            this.rows = data;\r\n            console.log(\"survey response : \");\r\n            console.log(this.rows);\r\n            this.navigateSurveyBuilder(this.rows[0]);\r\n            this.loader.close();\r\n          },\r\n          error => {\r\n            this.loader.close();\r\n            this.errDialog.showError({\r\n              title: \"Error\",\r\n              status: error.status,\r\n              type: \"http_error\"\r\n            });\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteSurvey(row) {\r\n    this.confirmService\r\n      .confirm({ message: `Delete ${row.topic}?` })\r\n      .subscribe(res => {\r\n        if (res) {\r\n          this.loader.open();\r\n          this.surveyService.removeSurvey(row, this.rows).subscribe(\r\n            data => {\r\n              this.rows = data;\r\n              this.loader.close();\r\n            },\r\n            error => {\r\n              this.loader.close();\r\n              this.errDialog.showError({\r\n                title: \"Error\",\r\n                status: error.status,\r\n                type: \"http_error\"\r\n              });\r\n            }\r\n          );\r\n        }\r\n      });\r\n  }\r\n\r\n  getAllSurvey() {\r\n    this.getSurveysSub = this.surveyService.getAllSurveys().subscribe(\r\n      successResp => {\r\n        this.rows = successResp.content;\r\n      },\r\n      error => {\r\n        this.loader.close();\r\n        console.log(error);\r\n        console.log(error.status);\r\n        this.errDialog.showError({\r\n          title: \"Error\",\r\n          status: error.status,\r\n          type: \"http_error\"\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  navigateSurveyBuilder(res: any) {\r\n    console.log(\"navigation method : \");\r\n    console.log(res.questions);\r\n    let extraParam: NavigationExtras = {\r\n      queryParams: {\r\n        id: res.id,\r\n        name: res.topic,\r\n        type: res.type,\r\n        productId: res.productId,\r\n        voteId: res.voteId,\r\n        startDate: res.startDate,\r\n        endDate: res.endDate,\r\n        questions: JSON.stringify(res.questions)\r\n      }\r\n    };\r\n\r\n    this.router.navigate([\"surveys/builder_v1\"], extraParam);\r\n  }\r\n\r\n  getTypeValue(key: string): string {\r\n    if (!this.typeMap) {\r\n      this.typeMap = new Map<string, string>();\r\n      this.typeMap.set(\"P\", \"Product Survey\");\r\n      this.typeMap.set(\"V\", \"Evote Survey\");\r\n    }\r\n    return this.typeMap.get(key);\r\n  }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"row\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n  <div fxFlex=\\\"100\\\" fxFlex.gt-md=\\\"300px\\\" fxFlex.gt-sm=\\\"50\\\">\\r\\n    <mat-card class=\\\"profile-sidebar mb-1 pb-0\\\">\\r\\n      <div class=\\\"propic text-center\\\">\\r\\n        <img src=\\\"assets/images/survey-icon.jpg\\\" alt=\\\"\\\">\\r\\n      </div>\\r\\n      <div class=\\\"profile-title text-center mb-1\\\">\\r\\n        <div class=\\\"main-title\\\">Survey Service</div>\\r\\n        <div class=\\\"subtitle mb-05\\\">Clear Picture Authentica</div>\\r\\n        <div class=\\\"text-muted\\\"> Provides the tools you need to easily create questionnaires.</div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"profile-nav\\\">\\r\\n        <mat-nav-list>\\r\\n          <mat-list-item routerLink=\\\"/surveys/summery\\\" routerLinkActive=\\\"list-item-active\\\">\\r\\n            <mat-icon>home</mat-icon>\\r\\n            Survey Summary\\r\\n          </mat-list-item>\\r\\n          <mat-divider></mat-divider>\\r\\n          <mat-list-item routerLink=\\\"/surveys/setting\\\" routerLinkActive=\\\"list-item-active\\\">\\r\\n            <mat-icon>settings</mat-icon>\\r\\n            Survey Settings\\r\\n          </mat-list-item>\\r\\n          <mat-divider></mat-divider>\\r\\n          <!-- <mat-list-item routerLink=\\\"/surveys/builder_v1\\\" routerLinkActive=\\\"list-item-active\\\">\\r\\n            <mat-icon>settings</mat-icon>\\r\\n            Survey Builder Demo\\r\\n          </mat-list-item>\\r\\n          <mat-divider></mat-divider> -->\\r\\n        </mat-nav-list>\\r\\n      </div>\\r\\n    </mat-card>\\r\\n\\r\\n\\r\\n\\r\\n  </div>\\r\\n\\r\\n  <!-- Profile Views -->\\r\\n  <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-md=\\\"calc(100% - 300px)\\\">\\r\\n    <router-outlet></router-outlet>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { egretAnimations } from '../../shared/animations/egret-animations';\r\n\r\n\r\n@Component({\r\n  selector: 'app-survey',\r\n  templateUrl: './survey.component.html',\r\n  animations: egretAnimations\r\n})\r\nexport class SurveyComponent implements OnInit {\r\n\r\n constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { SurveyComponent } from \"./survey.component\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { SurveyRoute } from \"./survey.routing\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport {\r\n  MatInputModule,\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatDialogModule,\r\n  MatSelectModule,\r\n  MatDatepickerModule,\r\n  MatNativeDateModule,\r\n  MatIconModule,\r\n  MatChipsModule,\r\n  MatDividerModule,\r\n  MatListModule,\r\n  MatExpansionModule,\r\n  MatButtonToggleModule,\r\n  MatSidenavModule,\r\n  MatHorizontalStepper,\r\n  MatStepperModule,\r\n  MatStepper\r\n} from \"@angular/material\";\r\nimport { NgxDatatableModule } from \"@swimlane/ngx-datatable\";\r\nimport { SurveyTableComponent } from \"./survey-table/survey-table.component\";\r\nimport { SurveySettingComponent } from \"./survey-setting/survey-setting.component\";\r\nimport { AnswerTemplatePopupComponent } from \"./answer-template-popup/answer-template-popup.component\";\r\nimport { SurveyCreationPopupComponent } from \"./survey-creation-popup/survey-creation-popup.component\";\r\nimport { SurveyBuilderComponent } from \"./survey-builder/survey-builder.component\";\r\nimport { LayoutService } from \"../../shared/services/layout.service\";\r\nimport { SharedModule } from \"../../shared/shared.module\";\r\nimport { SurveyService } from \"./survey.service\";\r\n\r\nimport { ProductCrudService } from \"../product-crud/product-crud.service\";\r\n\r\nimport { SurveyCommonComponent } from './survey-common.component';\r\nimport { EvoteService } from '../evote/evote-service.service';\r\nimport { ArrayFilter } from '../../shared/pipes/array-filter.pipe';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FlexLayoutModule,\r\n    ReactiveFormsModule,\r\n    MatInputModule,\r\n    NgxDatatableModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatDialogModule,\r\n    MatSelectModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatIconModule,\r\n    MatChipsModule,\r\n    MatDividerModule,\r\n    MatListModule,\r\n    MatExpansionModule,\r\n    MatButtonToggleModule,\r\n    MatSidenavModule,\r\n    RouterModule.forChild(SurveyRoute),\r\n    SharedModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule\r\n  ],\r\n  declarations: [\r\n    SurveyComponent,\r\n    SurveyTableComponent,\r\n    SurveySettingComponent,\r\n    AnswerTemplatePopupComponent,\r\n    SurveyCreationPopupComponent,\r\n    SurveyBuilderComponent,\r\n    SurveyCommonComponent,\r\n    ArrayFilter\r\n  ],\r\n  entryComponents: [AnswerTemplatePopupComponent, SurveyCreationPopupComponent],\r\n  providers: [SurveyService, ProductCrudService, EvoteService]\r\n})\r\nexport class SurveyModule {}\r\n","import { Routes } from \"@angular/router\";\r\nimport { SurveyComponent } from \"./survey.component\";\r\nimport { SurveyTableComponent } from \"./survey-table/survey-table.component\";\r\nimport { SurveySettingComponent } from \"./survey-setting/survey-setting.component\";\r\nimport { SurveyBuilderComponent } from \"./survey-builder/survey-builder.component\";\r\n\r\nexport const SurveyRoute: Routes = [\r\n  {\r\n    path: \"\",\r\n    component: SurveyComponent,\r\n    children: [\r\n      {\r\n        path: \"summery\",\r\n        component: SurveyTableComponent,\r\n        data: { title: \"Survey Summary\", breadcrumb: \"Summary\" }\r\n      },\r\n      {\r\n        path: \"setting\",\r\n        component: SurveySettingComponent,\r\n        data: { title: \"Survey Setting\", breadcrumb: \"Setting\" }\r\n      },\r\n      {\r\n        path: \"builder_v1\",\r\n        component: SurveyBuilderComponent,\r\n        data: { title: \"Survey Builder\", breadcrumb: \"Builder\" }\r\n      }\r\n    ]\r\n  }\r\n];\r\n","import { Injectable } from \"@angular/core\";\r\nimport {\r\n  HttpClient,\r\n  HttpHeaders,\r\n  HttpErrorResponse\r\n} from \"@angular/common/http\";\r\nimport { environment } from \"../../../environments/environment.prod\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { catchError } from \"../../../../node_modules/rxjs/operators\";\r\nimport { _throw } from \"rxjs/Observable/throw\";\r\nimport { map } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class SurveyService {\r\n  surveyApiUrl: string = environment.surveyApiURL;\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      \"Content-Type\": \"application/json\",\r\n      \"Access-Control-Allow-Headers\":\r\n        \"Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With\"\r\n    })\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAnswerTemplates(): Observable<any> {\r\n    return this.http\r\n      .get(this.surveyApiUrl + \"answer-templates/\")\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  addNewAnsTemplate(templateObj, items): Observable<any> {\r\n    return this.http\r\n      .post<any>(\r\n        this.surveyApiUrl + \"answer-templates/\",\r\n        templateObj,\r\n        this.httpOptions\r\n      )\r\n      .pipe(\r\n        map(data => {\r\n          items.unshift(data.content);\r\n          return items.slice();\r\n        }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateAnsTemplate(id, item) {\r\n    return this.http\r\n      .put<any>(\r\n        this.surveyApiUrl + \"answer-templates/\" + id,\r\n        item,\r\n        this.httpOptions\r\n      )\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  getAnsTemplateById(id, items): Observable<any> {\r\n    console.log(\"by id url : \" + this.surveyApiUrl + \"answer-templates/\" + id);\r\n    return this.http\r\n      .get<any>(this.surveyApiUrl + \"answer-templates/\" + id)\r\n      .pipe(\r\n        map(data => {\r\n          console.log(data.content);\r\n          return data.content;\r\n        }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  removeAnsTemplate(row, items): Observable<any> {\r\n    return this.http\r\n      .delete(\r\n        this.surveyApiUrl + \"answer-templates/\" + row.id,\r\n        this.httpOptions\r\n      )\r\n      .pipe(\r\n        map(data => {\r\n          let i = items.indexOf(row);\r\n          items.splice(i, 1);\r\n          return items;\r\n        }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  addNewSurvey(surveyObj, items): Observable<any> {\r\n    return this.http\r\n      .post<any>(this.surveyApiUrl + \"surveys\", surveyObj, this.httpOptions)\r\n      .pipe(\r\n        map(data => {\r\n          items.unshift(data.content);\r\n          return items.slice();\r\n        }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateSurveyWithQuestions(id, item) {\r\n    console.log(\"update with ques : \" + this.surveyApiUrl + \"surveys/\" + id);\r\n    return this.http\r\n      .put<any>(this.surveyApiUrl + \"surveys/\" + id, item, this.httpOptions)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  getAllSurveys(): Observable<any> {\r\n    return this.http\r\n      .get(this.surveyApiUrl + \"surveys\")\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  removeSurvey(row, items): Observable<any> {\r\n    return this.http\r\n      .delete(this.surveyApiUrl + \"surveys/\" + row.id, this.httpOptions)\r\n      .pipe(\r\n        map(data => {\r\n          let i = items.indexOf(row);\r\n          items.splice(i, 1);\r\n          return items;\r\n        }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getQuestionById(questionId): any {\r\n    return this.http\r\n      .get<any>(this.surveyApiUrl + \"questions/\" + questionId)\r\n      .pipe(\r\n        map(response => {\r\n          return response.content;\r\n        }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse | any) {\r\n    //console.log(error)\r\n    return _throw(error);\r\n  }\r\n}\r\n"],"sourceRoot":""}