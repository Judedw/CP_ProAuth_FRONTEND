{"version":3,"sources":["webpack:///./src/app/views/evote/evote-service.service.ts","webpack:///./src/app/views/product-crud/product-crud.service.ts","webpack:///./src/app/views/survey/survey.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAA2C;AAKb;AACmB;AACW;AACd;AAG9C;IAWE,sBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAVpC,iBAAY,GAAW,yEAAW,CAAC,YAAY,GAAG,SAAS,CAAC;QAC5D,qBAAgB,GAAW,yEAAW,CAAC,YAAY,GAAG,QAAQ,CAAC;QAE/D,gBAAW,GAAG;YACZ,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACvB,cAAc,EAAE,kBAAkB;gBAClC,8BAA8B,EAC5B,6EAA6E;aAChF,CAAC;SACH,CAAC;IACqC,CAAC;IAExC,8CAAuB,GAAvB;QACE,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,aAAa,CAAC;aACtC,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,mCAAY,GAAZ;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IAC7E,CAAC;IAED,mCAAY,GAAZ,UAAa,GAAG,EAAE,KAAK;QACrB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI;QACxE,gBAAgB;QAChB,wBAAwB;QACxB,gCAAgC;QAChC,6BAA6B;QAC7B,wBAAwB;QACxB,kBAAkB;QAClB,MAAM;QACN,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACJ,CAAC;IAED,+BAAQ,GAAR,UAAS,QAAQ,EAAE,KAAK;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,IAAI,CAC1D,0DAAG,CAAC,cAAI;YACN,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC5B,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACvB,CAAC,CAAC,EACF,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACJ,CAAC;IAED,kCAAW,GAAX,UAAY,EAAE,EAAE,IAAI;QAClB,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,GAAG,CAAM,IAAI,CAAC,YAAY,GAAG,EAAE,EAAE,IAAI,CAAC;aACtC,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,qCAAc,GAAd,UAAe,OAAO;QACpB,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,IAAI,CAAM,IAAI,CAAC,gBAAgB,EAAE,OAAO,CAAC;aACzC,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,mCAAY,GAAZ,UAAa,OAAO;QAClB,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACtC,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,GAAG,CAAM,IAAI,CAAC,YAAY,GAAG,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC;aACvD,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACxC,CAAC;IAEO,kCAAW,GAAnB,UAAoB,KAA8B;QAChD,MAAM,CAAC,uDAAU,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAnEU,YAAY;QADxB,gEAAU,EAAE;yCAYe,+DAAU;OAXzB,YAAY,CAoExB;IAAD,mBAAC;CAAA;AApEwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXkB;AAMb;AACmB;AACW;AACd;AAG9C;IAWE,4BAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAVpC,kBAAa,GAAW,yEAAW,CAAC,aAAa,GAAG,WAAW,CAAC;QAEhE,gBAAW,GAAG;YACZ,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACvB,cAAc,EAAE,kBAAkB;gBAClC,8BAA8B,EAC5B,6EAA6E;aAChF,CAAC;SACH,CAAC;QAGA,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;IAC7C,CAAC;IAED,0CAAa,GAAb,UAAc,EAAE,EAAE,IAAI;QACpB,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,GAAG,CAAM,IAAI,CAAC,aAAa,GAAG,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC;aACzD,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,uCAAU,GAAV,UAAW,UAAU,EAAE,KAAK;QAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,IAAI,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC,IAAI,CAC7D,0DAAG,CAAC,kBAAQ;YACV,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;QAC7B,CAAC,CAAC,EACF,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACJ,CAAC;IAED,2CAAc,GAAd;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IAC9E,CAAC;IAED,0CAAa,GAAb,UAAc,GAAG,EAAE,KAAK;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CACvD,0DAAG,CAAC,cAAI;YACN,IAAI,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC3B,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC,CAAC,EACF,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACJ,CAAC;IAED,qDAAwB,GAAxB;QACE,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;aACvC,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,2CAAc,GAAd,UAAe,KAAK;QAClB,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,GAAG,CAAM,IAAI,CAAC,aAAa,GAAG,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC;aACtD,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACxC,CAAC;IAEO,wCAAW,GAAnB,UAAoB,KAA8B;QAChD,oBAAoB;QACpB,MAAM,CAAC,uDAAU,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IA7DU,kBAAkB;QAD9B,gEAAU,EAAE;yCAYe,+DAAU;OAXzB,kBAAkB,CA8D9B;IAAD,yBAAC;CAAA;AA9D8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZY;AAKb;AAC8B;AACd;AACG;AAGjD;IAWE,uBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAVpC,iBAAY,GAAW,yEAAW,CAAC,YAAY,CAAC;QAEhD,gBAAW,GAAG;YACZ,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACvB,cAAc,EAAE,kBAAkB;gBAClC,8BAA8B,EAC5B,6EAA6E;aAChF,CAAC;SACH,CAAC;IAEqC,CAAC;IAExC,0CAAkB,GAAlB;QACE,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,mBAAmB,CAAC;aAC5C,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,yCAAiB,GAAjB,UAAkB,WAAW,EAAE,KAAK;QAClC,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,IAAI,CACH,IAAI,CAAC,YAAY,GAAG,mBAAmB,EACvC,WAAW,EACX,IAAI,CAAC,WAAW,CACjB;aACA,IAAI,CACH,0DAAG,CAAC,cAAI;YACN,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC5B,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACvB,CAAC,CAAC,EACF,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACN,CAAC;IAED,yCAAiB,GAAjB,UAAkB,EAAE,EAAE,IAAI;QACxB,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,GAAG,CACF,IAAI,CAAC,YAAY,GAAG,mBAAmB,GAAG,EAAE,EAC5C,IAAI,EACJ,IAAI,CAAC,WAAW,CACjB;aACA,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,0CAAkB,GAAlB,UAAmB,EAAE,EAAE,KAAM;QAC3B,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,IAAI,CAAC,YAAY,GAAG,mBAAmB,GAAG,EAAE,CAAC,CAAC;QAC3E,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,GAAG,CAAM,IAAI,CAAC,YAAY,GAAG,mBAAmB,GAAG,EAAE,CAAC;aACtD,IAAI,CACH,0DAAG,CAAC,cAAI;YACN,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC1B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACtB,CAAC,CAAC,EACF,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACN,CAAC;IAED,yCAAiB,GAAjB,UAAkB,GAAG,EAAE,KAAK;QAC1B,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,MAAM,CACL,IAAI,CAAC,YAAY,GAAG,mBAAmB,GAAG,GAAG,CAAC,EAAE,EAChD,IAAI,CAAC,WAAW,CACjB;aACA,IAAI,CACH,0DAAG,CAAC,cAAI;YACN,IAAI,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC3B,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC,CAAC,EACF,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACN,CAAC;IAED,oCAAY,GAAZ,UAAa,SAAS,EAAE,KAAK;QAC3B,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,IAAI,CAAM,IAAI,CAAC,YAAY,GAAG,SAAS,EAAE,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC;aACrE,IAAI,CACH,0DAAG,CAAC,cAAI;YACN,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC5B,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACvB,CAAC,CAAC,EACF,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACN,CAAC;IAED,iDAAyB,GAAzB,UAA0B,EAAE,EAAE,IAAI;QAChC,OAAO,CAAC,GAAG,CAAC,qBAAqB,GAAG,IAAI,CAAC,YAAY,GAAG,UAAU,GAAG,EAAE,CAAC,CAAC;QACzE,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,GAAG,CAAM,IAAI,CAAC,YAAY,GAAG,UAAU,GAAG,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC;aACrE,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,yCAAiB,GAAjB,UAAkB,EAAE,EAAE,IAAI;QACxB,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,GAAG,CAAM,IAAI,CAAC,YAAY,GAAG,UAAU,GAAG,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC;aACrE,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,qCAAa,GAAb;QACE,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;aAClC,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,oCAAY,GAAZ,UAAa,GAAG,EAAE,KAAK;QACrB,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,UAAU,GAAG,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC;aACjE,IAAI,CACH,0DAAG,CAAC,cAAI;YACN,IAAI,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC3B,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC,CAAC,EACF,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACN,CAAC;IAED,uCAAe,GAAf,UAAgB,UAAU;QACxB,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,GAAG,CAAM,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,UAAU,CAAC;aACvD,IAAI,CACH,0DAAG,CAAC,kBAAQ;YACV,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;QAC1B,CAAC,CAAC,EACF,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACN,CAAC;IAED,qCAAa,GAAb,UAAc,QAAQ;QACpB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,IAAI,CAAC,YAAY,GAAG,UAAU,GAAG,QAAQ,CAAC,CAAC,IAAI,CACvE,0DAAG,CAAC,kBAAQ;YACV,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;QAC1B,CAAC,CAAC,EACF,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACJ,CAAC;IAEO,mCAAW,GAAnB,UAAoB,KAA8B;QAChD,oBAAoB;QACpB,MAAM,CAAC,uDAAU,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IA7IU,aAAa;QADzB,gEAAU,EAAE;yCAYe,+DAAU;OAXzB,aAAa,CA8IzB;IAAD,oBAAC;CAAA;AA9IyB","file":"views-survey-interaction-survey-interaction-module~views-survey-survey-module.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport {\r\n  HttpClient,\r\n  HttpHeaders,\r\n  HttpErrorResponse\r\n} from \"@angular/common/http\";\r\nimport { catchError, map } from \"rxjs/operators\";\r\nimport { environment } from \"environments/environment.prod\";\r\nimport { Observable, throwError } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class EvoteService {\r\n  surveyApiUrl: string = environment.surveyApiURL + \"evotes/\";\r\n  populateVoterUrl: string = environment.surveyApiURL + \"voters\";\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      \"Content-Type\": \"application/json\",\r\n      \"Access-Control-Allow-Headers\":\r\n        \"Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With\"\r\n    })\r\n  };\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllEvotesSuggestions(): Observable<any> {\r\n    return this.http\r\n      .get(this.surveyApiUrl + \"suggestions\")\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  getAllEvotes(): Observable<any> {\r\n    return this.http.get(this.surveyApiUrl).pipe(catchError(this.handleError));\r\n  }\r\n\r\n  removeEvotes(row, items): Observable<any> {\r\n    return this.http.delete(this.surveyApiUrl + row.id, this.httpOptions).pipe(\r\n      // map(data => {\r\n      //   console.log(items);\r\n      //   let i = items.indexOf(row);\r\n      //   console.log('I : ' + i);\r\n      //   items.splice(i, 1);\r\n      //   return items;\r\n      // }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  addEvote(evoteObj, items): Observable<any> {\r\n    return this.http.post<any>(this.surveyApiUrl, evoteObj).pipe(\r\n      map(data => {\r\n        items.unshift(data.content);\r\n        return items.slice();\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  updateEvote(id, item) {\r\n    return this.http\r\n      .put<any>(this.surveyApiUrl + id, item)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  populateVoters(voteObj): Observable<any> {\r\n    return this.http\r\n      .post<any>(this.populateVoterUrl, voteObj)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  getEvoteById(evoteId): Observable<any> {\r\n    console.log(\"called get evote by id\");\r\n    return this.http\r\n      .get<any>(this.surveyApiUrl + evoteId, this.httpOptions)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse | any) {\r\n    return throwError(error);\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\n\r\nimport {\r\n  HttpClient,\r\n  HttpHeaders,\r\n  HttpErrorResponse\r\n} from \"@angular/common/http\";\r\nimport { catchError, map } from \"rxjs/operators\";\r\nimport { environment } from \"environments/environment.prod\";\r\nimport { throwError, Observable } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class ProductCrudService {\r\n  productApiUrl: string = environment.productApiURL + \"products/\";\r\n  recentProduct: any;\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      \"Content-Type\": \"application/json\",\r\n      \"Access-Control-Allow-Headers\":\r\n        \"Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With\"\r\n    })\r\n  };\r\n\r\n  constructor(private http: HttpClient) {\r\n    console.log(\"URL : \" + this.productApiUrl);\r\n  }\r\n\r\n  updateProduct(id, item) {\r\n    return this.http\r\n      .put<any>(this.productApiUrl + id, item, this.httpOptions)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  addProduct(productObj, items): Observable<any> {\r\n    return this.http.post<any>(this.productApiUrl, productObj).pipe(\r\n      map(response => {\r\n        console.log(JSON.stringify(response.content.id));\r\n        return response.content.id;\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  getAllProducts(): Observable<any> {\r\n    return this.http.get(this.productApiUrl).pipe(catchError(this.handleError));\r\n  }\r\n\r\n  removeProduct(row, items): Observable<any> {\r\n    return this.http.delete(this.productApiUrl + row.id).pipe(\r\n      map(data => {\r\n        let i = items.indexOf(row);\r\n        items.splice(i, 1);\r\n        return items;\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  getAllProductSuggestions(): Observable<any> {\r\n    return this.http\r\n      .get(this.productApiUrl + \"suggestions\")\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  getProductById(proId): Observable<any> {\r\n    return this.http\r\n      .get<any>(this.productApiUrl + proId, this.httpOptions)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse | any) {\r\n    //console.log(error)\r\n    return throwError(error);\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport {\r\n  HttpClient,\r\n  HttpHeaders,\r\n  HttpErrorResponse\r\n} from \"@angular/common/http\";\r\nimport { environment } from \"environments/environment.prod\";\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { catchError, map } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class SurveyService {\r\n  surveyApiUrl: string = environment.surveyApiURL;\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      \"Content-Type\": \"application/json\",\r\n      \"Access-Control-Allow-Headers\":\r\n        \"Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With\"\r\n    })\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAnswerTemplates(): Observable<any> {\r\n    return this.http\r\n      .get(this.surveyApiUrl + \"answer-templates/\")\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  addNewAnsTemplate(templateObj, items): Observable<any> {\r\n    return this.http\r\n      .post<any>(\r\n        this.surveyApiUrl + \"answer-templates/\",\r\n        templateObj,\r\n        this.httpOptions\r\n      )\r\n      .pipe(\r\n        map(data => {\r\n          items.unshift(data.content);\r\n          return items.slice();\r\n        }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateAnsTemplate(id, item) {\r\n    return this.http\r\n      .put<any>(\r\n        this.surveyApiUrl + \"answer-templates/\" + id,\r\n        item,\r\n        this.httpOptions\r\n      )\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  getAnsTemplateById(id, items?): Observable<any> {\r\n    console.log(\"by id url : \" + this.surveyApiUrl + \"answer-templates/\" + id);\r\n    return this.http\r\n      .get<any>(this.surveyApiUrl + \"answer-templates/\" + id)\r\n      .pipe(\r\n        map(data => {\r\n          console.log(data.content);\r\n          return data.content;\r\n        }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  removeAnsTemplate(row, items): Observable<any> {\r\n    return this.http\r\n      .delete(\r\n        this.surveyApiUrl + \"answer-templates/\" + row.id,\r\n        this.httpOptions\r\n      )\r\n      .pipe(\r\n        map(data => {\r\n          let i = items.indexOf(row);\r\n          items.splice(i, 1);\r\n          return items;\r\n        }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  addNewSurvey(surveyObj, items): Observable<any> {\r\n    return this.http\r\n      .post<any>(this.surveyApiUrl + \"surveys\", surveyObj, this.httpOptions)\r\n      .pipe(\r\n        map(data => {\r\n          items.unshift(data.content);\r\n          return items.slice();\r\n        }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateSurveyWithQuestions(id, item) {\r\n    console.log(\"update with ques : \" + this.surveyApiUrl + \"surveys/\" + id);\r\n    return this.http\r\n      .put<any>(this.surveyApiUrl + \"surveys/\" + id, item, this.httpOptions)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  updateSurveyPopup(id, item): Observable<any> {\r\n    return this.http\r\n      .put<any>(this.surveyApiUrl + \"surveys/\" + id, item, this.httpOptions)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  getAllSurveys(): Observable<any> {\r\n    return this.http\r\n      .get(this.surveyApiUrl + \"surveys\")\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  removeSurvey(row, items): Observable<any> {\r\n    return this.http\r\n      .delete(this.surveyApiUrl + \"surveys/\" + row.id, this.httpOptions)\r\n      .pipe(\r\n        map(data => {\r\n          let i = items.indexOf(row);\r\n          items.splice(i, 1);\r\n          return items;\r\n        }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getQuestionById(questionId): any {\r\n    return this.http\r\n      .get<any>(this.surveyApiUrl + \"questions/\" + questionId)\r\n      .pipe(\r\n        map(response => {\r\n          return response.content;\r\n        }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getSurveyById(surveyId) {\r\n    return this.http.get<any>(this.surveyApiUrl + \"surveys/\" + surveyId).pipe(\r\n      map(response => {\r\n        return response.content;\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse | any) {\r\n    //console.log(error)\r\n    return throwError(error);\r\n  }\r\n}\r\n"],"sourceRoot":""}